Out[96]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\nthis version (va1) is executable so can be called by airflow\n\'\'\'\n\nimport sys\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport time\nimport requests\n\nimport logging\n\n\n\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\n# file paths for blob storage\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\nnft_name=\'Meebits\'\ndef get_eth_balance(eth_address):\n    url=etherscan_url\n    api_key=eth_api_key\n    param={\'ETH_balance\':{\'module\':\'account\',\\\n                        \'action\':\'balance\',\\\n                        \'address\':eth_address,\\\n                        \'tag\':\'latest\',\\\n                        \'apikey\':api_key}}\n    limit_exceeded=True\n    while limit_exceeded==True:\n        response=requests.get(url,params=param[\'ETH_balance\'])\n        message=response.json()\n        if message[\'result\']==\'Max rate limit reached\':\n            time.sleep(0.5)\n            continue\n        else:\n            limit_exceeded=False\n            return message[\'result\']\n    return\n\n\ndef process_eth_data():\n    #path to the preprocessed reference data of Etherscan\n    EScan_parquet_path=f\'{preprocessed_data_path}/{today}/EScan/NFT={nft_name}/\'\n\n    logging.info(f"READING ETHERSCAN REFERENCE DATA")\n    EScan_reference_DF=spark.read.parquet(EScan_parquet_path)\n    \n    logging.info(f"CALLING ETH BALANCE UDF")\n    eth_udf=udf(lambda x : get_eth_balance(x))\n    eth_balance_df=EScan_reference_DF.withColumn(\'ETH_Balance\',eth_udf(EScan_reference_DF[\'owner_address\']))\n    logging.info(f"CACHEING ETH UDF DATAFRAME TO PROCESSED LAYER")\n    eth_balance_df.cache()\n    eth_balance_df.show(10,truncate=False)\n    logging.info(f"WRITING ETH UDF DATAFRAME TO PROCESSED LAYER")\n    eth_balance_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/ETH_Balance/NFT={nft_name}/\')\n    return\n\nif __name__=="__main__":\n    process_eth_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'Executing command, time = 1643086812350.
Out[97]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\nthis version (va1) is executable so can be called by airflow\n\'\'\'\nfrom os import truncate\nimport sys\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport time\nimport requests\nimport logging\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\nnft_name=\'CryptoPunks\'\ndef get_token_balance(eth_address):\n    url=etherscan_url\n    api_key=token_api_key\n    token_addresses={\n    \'Wrapped_eth\':\'0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\',\n    \'Tether\':\'0xdac17f958d2ee523a2206206994597c13d831ec7\',\n    \'Usdc\':\'0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\'}\n    new_dict={}\n    for i in token_addresses.keys():\n        param={\'token_balance\':{\'module\':\'account\',\n                                \'action\':\'tokenbalance\',\\\n                                \'contractaddress\':token_addresses[i],\\\n                                \'address\':eth_address,\\\n                                \'tag\':\'latest\',\'apikey\':api_key}}\n        limit_exceeded=True\n        while limit_exceeded==True:\n            response=requests.get(url,params=param[\'token_balance\'])\n            message=response.json()\n            if message[\'result\']==\'Max rate limit reached\':\n                time.sleep(0.5)\n                continue\n            else:\n                limit_exceeded=False\n                new_dict[i]=message[\'result\']\n        \n    return new_dict\n\n\n\ndef process_token_data():\n    #path to the preprocessed reference data of Etherscan\n    EScan_parquet_path=f\'{preprocessed_data_path}/{today}/EScan/NFT={nft_name}/\'\n\n    logging.info(f"READING TOKEN REFERENCE DATA")\n    EScan_reference_DF=spark.read.parquet(EScan_parquet_path)\n\n    logging.info(f"CALLING TOKEN BALANCE UDF")\n    token_udf=udf(lambda x : get_token_balance(x),MapType(StringType(),StringType()))\n    token_balance_df=EScan_reference_DF.withColumn(\'Token_Balance\',token_udf(EScan_reference_DF[\'owner_address\']))\n    logging.info(f"CACHEING TOKEN UDF DATAFRAME TO PROCESSED LAYER")\n    token_balance_df.cache()\n    token_balance_df.show(10,truncate=False)\n    logging.info(f"WRITING TOKEN UDF DATAFRAME TO PROCESSED LAYER")\n    token_balance_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/Token_Balance/NFT={nft_name}/\')\n    \n    return\n\nif __name__=="__main__":\n    process_token_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'+------------------------------------------+---------------------+
|owner_address                             |ETH_Balance          |
+------------------------------------------+---------------------+
|0x005e9eed36bfea0d05c0e8f36f32d4f4e08efacd|12447652205501627982 |
|0x0845fc89c51b2bcd1c3b0db9dbca497d641ec7d3|203699378274139629   |
|0x09d4083ffd20d21acb9118465ad7c52ac8b548f7|3106606561824616971  |
|0x1e611bef4bbcb562d2f1e0784084a75a7e7402a8|422383032976745050   |
|0x1e898058a3404b9cb4a1ebe0190c45bf84226ce6|22706289742359392    |
|0x362b638b43f767350ac0a01b67baad825c108f3d|6057409127894597064  |
|0x4c4083b2cc9d433207a9c811865fd93b8902c0f9|0                    |
|0x53ede7cae3eb6a7d11429fe589c0278c9acbe21a|3137597476722580916  |
|0x56178626332fc530561535eeaa914b863aa455f2|104102812614710658691|
|0x63de6063eed48e863ef4b316159630ebaf897c40|492554712185714115   |
+------------------------------------------+---------------------+
only showing top 10 rows

Executing command, time = 1643086824013.
Out[98]: '\'\'\'Transformation_to_structured script\'s purpose is to \nClean, validate and structure Etherscan and Cryptocompare Enrichment data\n\'\'\'\n\nimport sys\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport logging\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\n\n\ndef Structured_transformation_eth():\n    today=datetime.date.today().strftime(\'%m-%d-%y\')\n    # reading EtherScan Token and ETH DF from processed and writing to structure\n\n    logging.info(f"CREATING ETHERSCAN ETH DATAFRAME FROM PROCESSED")\n    EScan_ETH_DF=spark.read.parquet(f\'{processed_data_path}{today}/ETH_Balance/NFT=**/\')\n    structured_ETH_DF=EScan_ETH_DF.select(\n    EScan_ETH_DF[\'owner_address\'],\\\n    format_number((EScan_ETH_DF[\'ETH_Balance\'].cast(FloatType())/10**18),2).alias(\'ETH\'))\n\n    logging.info(f"WRITING ETHERSCAN TOKEN DATAFRAME TO STRUCTURED")\n    structured_ETH_DF.show(10,truncate=False)\n    structured_ETH_DF.write.mode(\'overwrite\').parquet(f\'{structured_data_path}{today}/ETH_Balance/\')\n\n    \n    return\n\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    Structured_transformation_eth()\n'+------------------------------------------+------+
|owner_address                             |ETH   |
+------------------------------------------+------+
|0x020ca66c30bec2c4fe3861a94e4db4a498a35872|652.09|
|0x05c250120ce07ba6fe361b39ac344148435c25ca|1.53  |
|0x066317b90509069eb52474a38c212508f8a1211c|830.80|
|0x14ae8100ea85a11bbb36578f83ab1b5c1cfdd61c|5.95  |
|0x1622ebc67a1db29e276ad11a020448b5307991dd|6.92  |
|0x19cb41c7f8baefa749adf20bef12c0c77313e88f|0.46  |
|0x1dc9fb024fda92a8f409f21bdf2c7d46d11315be|1.77  |
|0x1e89a91408cb1dfe9fddeee89d888fa91ea0e25d|0.96  |
|0x21faa7406de0e6f99c313375b4e0dcad3ea38e2a|102.79|
|0x222a50ddb9126d372eb5811a727581cb6dc31237|2.84  |
+------------------------------------------+------+
only showing top 10 rows

+-------------------+--------+
|txn_date           |USD_Rate|
+-------------------+--------+
|2021-10-28 23:50:37|4288.22 |
|2021-03-11 00:48:39|1827.06 |
|2021-03-11 20:57:01|1827.06 |
|2021-12-09 20:38:17|4111.92 |
|2021-07-30 21:24:47|2463.61 |
|2021-09-11 18:41:23|3266.43 |
|2021-07-30 18:36:56|2463.61 |
|2021-08-24 06:34:02|3172.57 |
|2021-08-06 18:18:56|2892.36 |
|2021-09-04 21:39:01|3887.01 |
+-------------------+--------+
only showing top 10 rows

Executing command, time = 1643086841277.
Out[99]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\ningest_token v2 uses a new API key so can be processed in parallel with ingest_eth\n\'\'\'\n\nfrom os import truncate\nimport sys\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport requests\nfrom requests.exceptions import HTTPError\nimport time\nimport logging\n\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\nnft_name=\'Doodles\'\n\n\ndef get_usd_price(unix):\n    url=f\'{cryptocompare_url}{unix}\'\n    api_key=cryptocompare_api_key\n    limit_exceeded=True\n    while limit_exceeded==True:\n        response=requests.get(url,params={\'api_key\':api_key})\n        message=response.json()\n        if message[\'ETH\']:\n            limit_exceeded=False\n            return message[\'ETH\'][\'USD\']\n        else:\n            time.sleep(0.5)\n            continue\n    return\n\n\n\ndef process_usd_data():\n    #path to the preprocessed reference data of Etherscan\n    CCompare_parquet_path=f\'{preprocessed_data_path}/{today}/CCompare/NFT={nft_name}/\'\n\n    logging.info(f"READING CRYPTOCOMPARE REFERENCE DATA")\n    CCompare_reference_DF=spark.read.parquet(CCompare_parquet_path)\n\n    logging.info(f"CALLING DOLLAR PRICE UDF")\n    dollar_udf=udf(lambda x : get_usd_price(x))\n    usd_price_df=CCompare_reference_DF.withColumn(\'USD_Rate\',dollar_udf(CCompare_reference_DF[\'unix\'])).drop(CCompare_reference_DF[\'unix\'])\n    logging.info(f"CACHEING DOLLAR UDF DATAFRAME TO PROCESSED LAYER")\n    usd_price_df.cache()\n    usd_price_df.show(10,truncate=False)\n    logging.info(f"WRITING DOLLAR UDF DATAFRAME TO PROCESSED LAYER")\n    usd_price_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/USD_Price/NFT={nft_name}/\')\n\n    return\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    process_usd_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'2022-01-25T05:00:50.323+0000: [GC (Allocation Failure) [PSYoungGen: 1929435K->76221K(2002432K)] 2294745K->441539K(6276096K), 0.0604871 secs] [Times: user=0.13 sys=0.00, real=0.06 secs] 
+------------------------------------------+------------------------------------------------------+
|owner_address                             |Token_Balance                                         |
+------------------------------------------+------------------------------------------------------+
|0x040da2c464933005b6d1ffeccec7fb4025dc9ddb|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}            |
|0x04ae2f0bda04f1405991d91c2e8420d6148369ea|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}            |
|0x06e63138f3241a420829bc125e6cb6bebf88c2c2|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}            |
|0x0a8f4037729accb854da856431a87b8a264d8c40|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}            |
|0x1251122f1d77fa46e1e576c4fd6dd56ab17812ff|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}            |
|0x1db12c2a7c803567c9fd59a202504edf0e56ca78|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}            |
|0x22eab1c78521596f9d6d73dd878778009c39317c|{Usdc -> 0, Tether -> 208952523762, Wrapped_eth -> 0} |
|0x266892ed0d40ea5c37f3e0239537999c13468311|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}            |
|0x2e675eeae4747c248bfddbafaa3a8a2fdddaa44b|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}            |
|0x34669322bdfca9e801ca334e7b0e6d69d1f87137|{Usdc -> 0, Tether -> 1542262769000, Wrapped_eth -> 0}|
+------------------------------------------+------------------------------------------------------+
only showing top 10 rows

Executing command, time = 1643086870029.
Out[100]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\nthis version (va1) is executable so can be called by airflow\n\'\'\'\nfrom os import truncate\nimport sys\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport time\nimport requests\nimport logging\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\nnft_name=\'Doodles\'\ndef get_token_balance(eth_address):\n    url=etherscan_url\n    api_key=token_api_key\n    token_addresses={\n    \'Wrapped_eth\':\'0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\',\n    \'Tether\':\'0xdac17f958d2ee523a2206206994597c13d831ec7\',\n    \'Usdc\':\'0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\'}\n    new_dict={}\n    for i in token_addresses.keys():\n        param={\'token_balance\':{\'module\':\'account\',\n                                \'action\':\'tokenbalance\',\\\n                                \'contractaddress\':token_addresses[i],\\\n                                \'address\':eth_address,\\\n                                \'tag\':\'latest\',\'apikey\':api_key}}\n        limit_exceeded=True\n        while limit_exceeded==True:\n            response=requests.get(url,params=param[\'token_balance\'])\n            message=response.json()\n            if message[\'result\']==\'Max rate limit reached\':\n                time.sleep(0.5)\n                continue\n            else:\n                limit_exceeded=False\n                new_dict[i]=message[\'result\']\n        \n    return new_dict\n\n\n\ndef process_token_data():\n    #path to the preprocessed reference data of Etherscan\n    EScan_parquet_path=f\'{preprocessed_data_path}/{today}/EScan/NFT={nft_name}/\'\n\n    logging.info(f"READING TOKEN REFERENCE DATA")\n    EScan_reference_DF=spark.read.parquet(EScan_parquet_path)\n\n    logging.info(f"CALLING TOKEN BALANCE UDF")\n    token_udf=udf(lambda x : get_token_balance(x),MapType(StringType(),StringType()))\n    token_balance_df=EScan_reference_DF.withColumn(\'Token_Balance\',token_udf(EScan_reference_DF[\'owner_address\']))\n    logging.info(f"CACHEING TOKEN UDF DATAFRAME TO PROCESSED LAYER")\n    token_balance_df.cache()\n    token_balance_df.show(10,truncate=False)\n    logging.info(f"WRITING TOKEN UDF DATAFRAME TO PROCESSED LAYER")\n    token_balance_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/Token_Balance/NFT={nft_name}/\')\n    \n    return\n\nif __name__=="__main__":\n    process_token_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'+-------------------+--------+
|txn_date           |USD_Rate|
+-------------------+--------+
|2022-01-05 18:16:54|3536.77 |
|2022-01-07 20:48:56|3196.47 |
|2022-01-09 02:56:59|3150.83 |
|2022-01-05 13:33:44|3536.77 |
|2022-01-06 23:16:53|3406.48 |
|2022-01-04 19:34:29|3785.67 |
|2022-01-07 01:49:56|3196.47 |
|2022-01-12 18:54:51|3373.03 |
|2022-01-09 01:41:00|3150.83 |
|2022-01-04 20:54:15|3785.67 |
+-------------------+--------+
only showing top 10 rows

Executing command, time = 1643086895925.
Out[101]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\ningest_token v2 uses a new API key so can be processed in parallel with ingest_eth\n\'\'\'\n\nfrom os import truncate\nimport sys\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport requests\nfrom requests.exceptions import HTTPError\nimport time\nimport logging\n\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\nnft_name=\'Meebits\'\n\n\ndef get_usd_price(unix):\n    url=f\'{cryptocompare_url}{unix}\'\n    api_key=cryptocompare_api_key\n    limit_exceeded=True\n    while limit_exceeded==True:\n        response=requests.get(url,params={\'api_key\':api_key})\n        message=response.json()\n        if message[\'ETH\']:\n            limit_exceeded=False\n            return message[\'ETH\'][\'USD\']\n        else:\n            time.sleep(0.5)\n            continue\n    return\n\n\n\ndef process_usd_data():\n    #path to the preprocessed reference data of Etherscan\n    CCompare_parquet_path=f\'{preprocessed_data_path}/{today}/CCompare/NFT={nft_name}/\'\n\n    logging.info(f"READING CRYPTOCOMPARE REFERENCE DATA")\n    CCompare_reference_DF=spark.read.parquet(CCompare_parquet_path)\n\n    logging.info(f"CALLING DOLLAR PRICE UDF")\n    dollar_udf=udf(lambda x : get_usd_price(x))\n    usd_price_df=CCompare_reference_DF.withColumn(\'USD_Rate\',dollar_udf(CCompare_reference_DF[\'unix\'])).drop(CCompare_reference_DF[\'unix\'])\n    logging.info(f"CACHEING DOLLAR UDF DATAFRAME TO PROCESSED LAYER")\n    usd_price_df.cache()\n    usd_price_df.show(10,truncate=False)\n    logging.info(f"WRITING DOLLAR UDF DATAFRAME TO PROCESSED LAYER")\n    usd_price_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/USD_Price/NFT={nft_name}/\')\n\n    return\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    process_usd_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'+------------------------------------------+-----------------------------------------------------------+
|owner_address                             |Token_Balance                                              |
+------------------------------------------+-----------------------------------------------------------+
|0x052564eb0fd8b340803df55def89c25c432f43f4|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
|0x13c59c501f8557fb44724df06a85ccaeefc90374|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
|0x1d3eb89c3a5c5ec4808ac341732efd45c0f1703d|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 410000000000000000}|
|0x224b3f081075c1bc10e8fce9c03719214f714e23|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
|0x2a584a403ec9ad290a864465654b3a32a4588d37|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
|0x4b4c13434aac5e99645a4d9e59fe497b3318f50f|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
|0x4f3d9f60c500a79beac465c50a60e1088ae75622|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
|0x5b9a65eabc2cbfc5eceec377afa4399f702eb3d4|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
|0x5cb58a3fa9b02ae11f443b3adc231172356eccd7|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
|0x644a79558151a29c3364cb1152dfe2763f963101|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
+------------------------------------------+-----------------------------------------------------------+
only showing top 10 rows

Executing command, time = 1643086924227.
Out[102]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\nthis version (va1) is executable so can be called by airflow\n\'\'\'\nfrom os import truncate\nimport sys\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport time\nimport requests\nimport logging\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\nnft_name=\'Meebits\'\ndef get_token_balance(eth_address):\n    url=etherscan_url\n    api_key=token_api_key\n    token_addresses={\n    \'Wrapped_eth\':\'0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\',\n    \'Tether\':\'0xdac17f958d2ee523a2206206994597c13d831ec7\',\n    \'Usdc\':\'0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\'}\n    new_dict={}\n    for i in token_addresses.keys():\n        param={\'token_balance\':{\'module\':\'account\',\n                                \'action\':\'tokenbalance\',\\\n                                \'contractaddress\':token_addresses[i],\\\n                                \'address\':eth_address,\\\n                                \'tag\':\'latest\',\'apikey\':api_key}}\n        limit_exceeded=True\n        while limit_exceeded==True:\n            response=requests.get(url,params=param[\'token_balance\'])\n            message=response.json()\n            if message[\'result\']==\'Max rate limit reached\':\n                time.sleep(0.5)\n                continue\n            else:\n                limit_exceeded=False\n                new_dict[i]=message[\'result\']\n        \n    return new_dict\n\n\n\ndef process_token_data():\n    #path to the preprocessed reference data of Etherscan\n    EScan_parquet_path=f\'{preprocessed_data_path}/{today}/EScan/NFT={nft_name}/\'\n\n    logging.info(f"READING TOKEN REFERENCE DATA")\n    EScan_reference_DF=spark.read.parquet(EScan_parquet_path)\n\n    logging.info(f"CALLING TOKEN BALANCE UDF")\n    token_udf=udf(lambda x : get_token_balance(x),MapType(StringType(),StringType()))\n    token_balance_df=EScan_reference_DF.withColumn(\'Token_Balance\',token_udf(EScan_reference_DF[\'owner_address\']))\n    logging.info(f"CACHEING TOKEN UDF DATAFRAME TO PROCESSED LAYER")\n    token_balance_df.cache()\n    token_balance_df.show(10,truncate=False)\n    logging.info(f"WRITING TOKEN UDF DATAFRAME TO PROCESSED LAYER")\n    token_balance_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/Token_Balance/NFT={nft_name}/\')\n    \n    return\n\nif __name__=="__main__":\n    process_token_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'+-------------------+--------+
|txn_date           |USD_Rate|
+-------------------+--------+
|2021-07-09 23:59:30|2145.67 |
|2021-05-13 15:42:34|3718.99 |
|2021-08-04 21:28:42|2725.72 |
|2021-05-04 11:42:32|3241.09 |
|2021-05-04 20:47:35|3241.09 |
|2021-05-04 19:29:46|3241.09 |
|2021-08-30 20:41:08|3228.46 |
|2021-05-09 11:14:03|3927.06 |
|2021-05-08 20:16:18|3916.25 |
|2021-05-09 12:00:20|3927.06 |
+-------------------+--------+
only showing top 10 rows

Executing command, time = 1643086948538.
Out[103]: '\'\'\'Transformation_to_structured script\'s purpose is to \nClean, validate and structure Etherscan and Cryptocompare Enrichment data\n\'\'\'\nimport sys\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport logging\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\n\ndef Structured_transformation_nft():\n    today=datetime.date.today().strftime(\'%m-%d-%y\')\n\n    # reading Opensea NFT files from processed and writing to structured\n    logging.info(f"CREATING NFT DATAFRAME FROM PROCESSED")\n    processed_nft_df= spark.read.parquet(f\'{processed_data_path}{today}/NFT_Collection/\')\n    \n    logging.info(f"CREATING CRYPTOCOMPARE USD DATAFRAME FROM PROCESSED")\n    processed_usd_df=spark.read.parquet(f\'{processed_data_path}{today}/USD_Price/NFT=**/\')\n\n    logging.info(f"JOINING NFT AND USD DATAFRAME")\n    structured_nft_DF=processed_nft_df.join(broadcast(processed_usd_df),processed_nft_df[\'txn_date\']==processed_usd_df[\'txn_date\'],\'left\').drop(processed_usd_df[\'txn_date\'])\n\n    logging.info(f"WRITING NFT DATAFRAME TO STRUCTURED")\n    structured_nft_DF.show(10,truncate=False)\n    structured_nft_DF.write.mode(\'overwrite\').parquet(f\'{structured_data_path}{today}/NFT_Collection/\')\n    \n    return\n\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    Structured_transformation_nft()\n'+-----------------+--------+---------+---------------+------------------------------------------+-------------------+-----------------+------------+--------+
|NFT              |token_id|num_sales|username       |owner_address                             |txn_date           |payment_amt      |payment_type|USD_Rate|
+-----------------+--------+---------+---------------+------------------------------------------+-------------------+-----------------+------------+--------+
|BoredApeYachtClub|2087    |2        |null           |0x066317b90509069eb52474a38c212508f8a1211c|2021-09-30 01:28:47|769.0            |ETH         |3000.83 |
|BoredApeYachtClub|3749    |3        |TheSandboxGame |0x7a9fe22691c811ea339d9b73150e6911a5343dca|2021-09-06 21:02:29|740.0            |ETH         |3928.4  |
|BoredApeYachtClub|8585    |3        |null           |0x86292f24afffe8d4159282980db89e8ef4b92b0a|2021-10-19 23:15:59|696.9689999999999|ETH         |3877.45 |
|BoredApeYachtClub|7090    |2        |j1mmy_vault    |0x8ad272ac86c6c88683d9a60eb8ed57e6c304bb0c|2021-09-02 14:59:41|600.0            |ETH         |3787.7  |
|BoredApeYachtClub|8135    |3        |MetalinkLabs   |0x222a50ddb9126d372eb5811a727581cb6dc31237|2021-09-17 16:43:57|550.0            |WETH        |3398.82 |
|BoredApeYachtClub|9361    |3        |Rewkang_Vault  |0xff3879b8a363aed92a6eaba8f61f1a96a9ec3c1e|2021-08-26 19:00:15|500.0            |ETH         |3093.62 |
|BoredApeYachtClub|3562    |2        |MachiBigBrother|0x020ca66c30bec2c4fe3861a94e4db4a498a35872|2021-12-28 22:17:44|430.0            |ETH         |3793.54 |
|BoredApeYachtClub|5199    |2        |MachiBigBrother|0x020ca66c30bec2c4fe3861a94e4db4a498a35872|2021-10-14 12:57:22|425.0            |ETH         |3791.23 |
|BoredApeYachtClub|8877    |3        |null           |0x066317b90509069eb52474a38c212508f8a1211c|2021-08-30 03:49:45|425.0            |ETH         |3228.46 |
|BoredApeYachtClub|1837    |5        |0xDeepak       |0x69c488bcda156379b6661f08a35db627e5d467dd|2022-01-09 00:31:32|420.69           |ETH         |3150.83 |
+-----------------+--------+---------+---------------+------------------------------------------+-------------------+-----------------+------------+--------+
only showing top 10 rows

Executing command, time = 1643086967175.
+------------------------------------------+---------------------------------------------------------------------+
|owner_address                             |Token_Balance                                                        |
+------------------------------------------+---------------------------------------------------------------------+
|0x005e9eed36bfea0d05c0e8f36f32d4f4e08efacd|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                           |
|0x0845fc89c51b2bcd1c3b0db9dbca497d641ec7d3|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                           |
|0x09d4083ffd20d21acb9118465ad7c52ac8b548f7|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 561932909715553683}          |
|0x1e611bef4bbcb562d2f1e0784084a75a7e7402a8|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                           |
|0x1e898058a3404b9cb4a1ebe0190c45bf84226ce6|{Usdc -> 150321677601, Tether -> 2305175, Wrapped_eth -> 0}          |
|0x362b638b43f767350ac0a01b67baad825c108f3d|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                           |
|0x4c4083b2cc9d433207a9c811865fd93b8902c0f9|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                           |
|0x53ede7cae3eb6a7d11429fe589c0278c9acbe21a|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                           |
|0x56178626332fc530561535eeaa914b863aa455f2|{Usdc -> 100000000, Tether -> 0, Wrapped_eth -> 11600000000000000000}|
|0x63de6063eed48e863ef4b316159630ebaf897c40|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                           |
+------------------------------------------+---------------------------------------------------------------------+
only showing top 10 rows

Out[104]: '\'\'\'Transformation_to_structured script\'s purpose is to \nClean, validate and structure Etherscan and Cryptocompare Enrichment data\n\'\'\'\n\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport logging\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\n\ndef Published_transformation_NFT():\n    today=datetime.date.today().strftime(\'%m-%d-%y\')\n    # reading EtherScan Token and ETH DF from processed and writing to structured\n    logging.info(f"READING NFT DATAFRAME FROM STRUCTURED")\n    \n    struct_NFT_DF=spark.read.parquet(f\'{structured_data_path}{today}/NFT_Collection/\')\n    Final_NFT_DF=struct_NFT_DF.withColumn(\'USD_Value\', (struct_NFT_DF[\'payment_amt\']*struct_NFT_DF[\'USD_Rate\'])).orderBy(col(\'USD_Value\').desc())\n\n    logging.info(f"ADDING USD_TOTAL COLUMN TO NFT DATAFRAME")\n    logging.info(f"WRITING NFT DATAFRAME TO PUBLISHED")\n    Final_NFT_DF.cache()\n    Final_NFT_DF.show(10,truncate=False)\n    Final_NFT_DF.write.mode(\'overwrite\').parquet(f\'{published_data_path}{today}/Final_NFT/\')\n\n\n    return\n\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    Published_transformation_NFT()\n'Executing command, time = 1643086975182.
+-----------+--------+---------+------------------------------------------+------------------------------------------+-------------------+------------------+------------+--------+-------------------+
|NFT        |token_id|num_sales|username                                  |owner_address                             |txn_date           |payment_amt       |payment_type|USD_Rate|USD_Value          |
+-----------+--------+---------+------------------------------------------+------------------------------------------+-------------------+------------------+------------+--------+-------------------+
|CryptoPunks|9998    |4        |0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db|0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db|2021-10-28 23:50:37|124457.06752488602|ETH         |4288.22 |5.336992861015668E8|
|CryptoPunks|4156    |5        |TheReal4156                               |0x4c1194386e121566b79d1f1dac9ef282348f04f3|2021-12-09 20:38:17|2500.0            |ETH         |4111.92 |1.02798E7          |
|CryptoPunks|7804    |2        |null                                      |0xf4b4a58974524e183c275f3c6ea895bc2368e738|2021-03-11 00:48:39|4200.0            |ETH         |1827.06 |7673652.0          |
|CryptoPunks|3100    |2        |null                                      |0x7b8961f67382c51c389726667ef7dd7cf95fefd3|2021-03-11 20:57:01|4200.0            |ETH         |1827.06 |7673652.0          |
|CryptoPunks|8857    |2        |null                                      |0xdf37ac79f8e9b698c4ab57d30a41e7f272331391|2021-09-11 18:41:23|2000.0            |ETH         |3266.43 |6532860.0          |
|CryptoPunks|5217    |2        |----------------------                    |0xe301612b0751f6d862a27be205fb8e3c40c8c6db|2021-07-30 21:24:47|2250.0            |ETH         |2463.61 |5543122.5          |
|CryptoPunks|6275    |2        |null                                      |0xbd4fd6759d77e3a3bcd4d838adbe41fd38829d8a|2021-09-04 21:39:01|1319.0            |ETH         |3887.01 |5126966.19         |
|CryptoPunks|7252    |2        |null                                      |0x0a8f4037729accb854da856431a87b8a264d8c40|2021-08-24 06:34:02|1600.0            |ETH         |3172.57 |5076112.0          |
|CryptoPunks|2338    |4        |null                                      |0x7cd3fc0e4ef95897f9b8db951dfc075cc924ebbe|2021-08-06 18:18:56|1500.0            |ETH         |2892.36 |4338540.0          |
|CryptoPunks|2140    |3        |GaryVee                                   |0xd6a984153acb6c9e2d788f08c2465a1358bb89a7|2021-07-30 18:36:56|1600.0            |ETH         |2463.61 |3941776.0          |
+-----------+--------+---------+------------------------------------------+------------------------------------------+-------------------+------------------+------------+--------+-------------------+
only showing top 10 rows

Out[105]: '\'\'\'Transformation_to_structured script\'s purpose is to \nClean, validate and structure Etherscan and Cryptocompare Enrichment data\n\'\'\'\n\nimport sys\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport logging\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\n\n\ndef Structured_transformation_token():\n    today=datetime.date.today().strftime(\'%m-%d-%y\')\n    # reading EtherScan Token and ETH DF from processed and writing to structured\n    logging.info(f"CREATING ETHERSCAN TOKEN DATAFRAME FROM PROCESSED")\n    \n    EScan_token_DF=spark.read.parquet(f\'{processed_data_path}{today}/Token_Balance/NFT=**/\')\n    structured_token_DF=EScan_token_DF.select(\\\n    EScan_token_DF[\'owner_address\'],\\\n    format_number(EScan_token_DF[\'token_balance\'][\'Wrapped_eth\'].cast(FloatType())/10**18,2).alias(\'WETH\'),\\\n    format_number(EScan_token_DF[\'token_balance\'][\'Usdc\'].cast(FloatType())/10**6,2).alias(\'USDC\'),\\\n    format_number(EScan_token_DF[\'token_balance\'][\'Tether\'].cast(FloatType())/10**6,2).alias(\'Tether\')\n    )\n    logging.info(f"WRITING ETHERSCAN TOKEN DATAFRAME TO STRUCTURED")\n    structured_token_DF.show(10,truncate=False)\n    structured_token_DF.write.mode(\'overwrite\').parquet(f\'{structured_data_path}{today}/Token_Balance/\')\n\n\n    return\n\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    Structured_transformation_token()\n'2022-01-25T05:03:02.426+0000: [GC (Allocation Failure) [PSYoungGen: 1939901K->134130K(1997824K)] 2305219K->506075K(6271488K), 0.0594944 secs] [Times: user=0.15 sys=0.00, real=0.06 secs] 
+------------------------------------------+-----+--------+---------+
|owner_address                             |WETH |USDC    |Tether   |
+------------------------------------------+-----+--------+---------+
|0x0bf6305d4382c37a7c330604048ae9813ddade28|0.00 |2,236.18|5,906.70 |
|0x0c54a765c77a88d9cda0bd7ad9b10422848d92ef|0.00 |0.00    |0.00     |
|0x13812fc2e57d690dea7603c83c555af4be848328|0.00 |0.00    |0.00     |
|0x2d8d75d4ba64efda74eead05ac6127df4e46efa9|1.65 |0.00    |0.00     |
|0x2f5170deea823099d75f200ae0524b30c3701881|13.00|0.00    |47,375.14|
|0x32ae912d4abfde382eb5cd4eadd2a3daab914d67|0.19 |0.00    |0.00     |
|0x34978faf3a9f469da7248d1365ddf69ac099588c|0.00 |863.58  |0.00     |
|0x3adc1e9b6c09c1fbd96de6c6ec5b5fea7036fd06|0.00 |0.00    |0.00     |
|0x3c4882d561cbed5ef467783a0e4091cf069708b7|0.00 |8,233.22|0.00     |
|0x3d280fde2ddb59323c891cf30995e1862510342f|0.00 |0.00    |0.00     |
+------------------------------------------+-----+--------+---------+
only showing top 10 rows

Executing command, time = 1643087015848.
Out[106]: '\'\'\'Transformation_to_structured script\'s purpose is to \nClean, validate and structure Etherscan and Cryptocompare Enrichment data\n\'\'\'\n\nfrom os import truncate\nfrom Env_configs import structured_data_path,published_data_path\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport logging\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\ndef Published_transformation_balance():\n    today=datetime.date.today().strftime(\'%m-%d-%y\')\n    # reading EtherScan Token and ETH DF from processed and writing to structured\n    logging.info(f"READING TOKEN AND ETH DATAFRAME FROM STRUCTURED")\n    \n    struct_token_DF=spark.read.parquet(f\'{structured_data_path}{today}/Token_Balance/\')\n    struct_ETH_DF=spark.read.parquet(f\'{structured_data_path}{today}/ETH_Balance/\')\n\n    logging.info(f"JOINING TOKEN AND ETH DATAFRAME")\n    Final_Balance_DF=struct_ETH_DF.join(struct_token_DF,struct_ETH_DF[\'owner_address\']==struct_token_DF[\'owner_address\'],\'left\').drop(struct_token_DF[\'owner_address\'])\n    Final_Balance_DF.cache()\n    Final_Balance_DF.show(10,truncate=False)\n    Final_Balance_DF.write.mode(\'overwrite\').parquet(f\'{published_data_path}{today}/Final_Balance/\')\n\n\n    return\n\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    Published_transformation_balance()'already mounted. Try to unmount first
Executing command, time = 1643087130797.
Out[107]: '\'\'\'Transformation_one script\'s purpose is to \n1) Transform raw Opensea JSON into dataframe\n2) Create dataframes of necessary reference data from Opensea dataframe which is\nrequired for Cryptocompare and Etherscan Data Enrichment \n\n-creates and writesOpensea DF\n-creates and caches Reference DF\n-creates and writes CC Reference DF\n-creates and writes Escan Reference DF\n\'\'\'\n\n\n\nimport json\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport logging\n\n\n\n# Azure credentials\nstorageAccountName = \'capstonestorageacct\'\nstorageAccountAccessKey = \'MRSUq/VsOXJZggRUZyloTWnnt9lVJTmtkf6U47S5nd3ECPl3VHX0mIysJlm1jyctsJ5IyqHj81tHeZ/nfrm+jQ==\'\nContainerName = \'capstoneblob\'\n\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n# spark = SparkSession.builder.master(\'local[*]\').appName(\'Preprocessed_transformation\').getOrCreate()\n\n# file paths for blob storage\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\n# mount azure blob container to make files accessible to PySpark \nif not any(mount.mountPoint == \'/mnt/capstoneblob/\' for mount in dbutils.fs.mounts()):\n    try:\n        dbutils.fs.mount(\n        source = "wasbs://{}@{}.blob.core.windows.net".format(ContainerName, storageAccountName),\n        mount_point = "/mnt/capstoneblob",\n        extra_configs = {\'fs.azure.account.key.\' + storageAccountName + \'.blob.core.windows.net\': storageAccountAccessKey})\n    except Exception as e:\n        print("already mounted. Try to unmount first")\n\ndisplay(dbutils.fs.ls(\'mnt/capstoneblob\'))\n\n\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n\'\'\'\nNFT RAW TRANSFORMATION\n1) Reads files from raw layer to create NFT dataframe with desired columns\n2) Writes NFT dataframe to processed layer\n3) Creates reference dataframe \n\nReturns reference dataframe\n\'\'\'\ndef nft_raw_tranformation():\n    \n    Opensea_df1= spark.read.json(raw_data_file_path)\n    \n    logging.info(f"CREATING OPENSEA NFT DATAFRAME FROM OPENSEA JSON IN RAW LAYER")\n    Opensea_df2=Opensea_df1.select(\n        Opensea_df1[\'asset_contract\'][\'name\'].alias(\'NFT\'),\\\n        Opensea_df1[\'token_id\'],\\\n        Opensea_df1[\'num_sales\'],\\\n        Opensea_df1[\'owner\'][\'user\'][\'username\'].alias(\'username\'),\\\n        Opensea_df1[\'owner\'][\'address\'].alias(\'owner_address\'),\\\n        to_timestamp(Opensea_df1[\'last_sale\'][\'event_timestamp\']).alias(\'txn_date\'),\\\n        (Opensea_df1[\'last_sale\'][\'total_price\']/10**18).alias(\'payment_amt\'),\\\n        Opensea_df1[\'last_sale\'][\'payment_token\'][\'symbol\'].alias(\'payment_type\'))\n    \n    logging.info(f"CREATING REFERENCE DATAFRAME")\n    Reference_df=Opensea_df2.select(\n        Opensea_df2[\'NFT\'],\\\n        Opensea_df2[\'owner_address\'],\\\n        Opensea_df2[\'txn_date\'])\n\n    logging.info(f"WRITING OPENSEA NFT DATAFRAME TO PROCESSED LAYER")\n    # writing OpenSea DF to pre-processed\n    Opensea_df2.show(10,truncate=False)\n    Opensea_df2.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/NFT_Collection/\')\n    return Reference_df\n\n\'\'\'\nCRYPTOCOMPARE\nCreates another reference dataframe for CryptoCompare API which takes in UNIX timestamps to get historical USD price\n\'\'\'\n\ndef create_ccompare_reference(reference):\n    logging.info(f"CREATING CRYPTOCOMPARE REFERENCE DATAFRAME")\n    unix_df=reference.select(\n        reference[\'NFT\'],\\\n        reference[\'txn_date\'])\\\n        .withColumn(\'unix\',unix_timestamp(reference[\'txn_date\']))\n\n    logging.info(f"WRITING CRYPTOCOMPARE DATAFRAME TO PRE-PROCESSED")\n    unix_df.show(10,truncate=False)\n    unix_df.write.partitionBy(\'NFT\').mode(\'overwrite\').parquet(f\'{preprocessed_data_path}{today}/CCompare/\')\n    \n    return\n\n\'\'\'\nETHERSCAN\nCreates another reference dataframe for EtherScan API which takes in UNIX timestamps to get historical USD price\n\'\'\'\n\ndef create_escan_reference(reference):\n    logging.info(f"CREATING ETHERSCAN REFERENCE DATAFRAME")\n    eth_addr_df=reference.select(\n        reference[\'NFT\'],\\\n        reference[\'owner_address\'])\\\n        .dropDuplicates([\'owner_address\'])\n\n    logging.info(f"WRITING ETHERSCAN DATAFRAME TO PRE-PROCESSED")\n    # writing Etherscan reference DF to pre-processed\n    eth_addr_df.show(10,truncate=False)\n    eth_addr_df.write.partitionBy(\'NFT\').mode(\'overwrite\').parquet(f\'{preprocessed_data_path}{today}/EScan/\')\n\n    return\n\ndef main():\n    \n    reference_df=nft_raw_tranformation()\n    reference_df.cache()\n    reference_df.show()\n    create_escan_reference(reference_df)\n    create_ccompare_reference(reference_df)\n    return\n\nif __name__=="__main__":\n    main()\n'already mounted. Try to unmount first
+---------+--------+---------+-------------+------------------------------------------+-------------------+-----------+------------+
|NFT      |token_id|num_sales|username     |owner_address                             |txn_date           |payment_amt|payment_type|
+---------+--------+---------+-------------+------------------------------------------+-------------------+-----------+------------+
|Cool Cats|1490    |1        |dontbotherme |0x762b35b809ac4266beb076ff0f28547ad571201e|2021-10-05 01:44:29|320.0      |ETH         |
|Cool Cats|3330    |1        |CoinUnited   |0x4c4a5490deefefa16f49a1a48c9acdc60f4117d0|2021-08-20 00:45:13|110.0      |ETH         |
|Cool Cats|5635    |3        |null         |0xe13756351f9cbc45ad6c4da1542faed0ee1a7526|2021-10-07 14:48:23|99.0       |ETH         |
|Cool Cats|8624    |2        |FriendlyDegen|0x2f5170deea823099d75f200ae0524b30c3701881|2021-10-08 02:33:07|83.0       |WETH        |
|Cool Cats|5280    |1        |SighVault    |0xf5a9288eb6e86a3fcb717e7f13475d947f459e3a|2021-08-07 17:52:48|80.0       |ETH         |
|Cool Cats|2157    |3        |MR_CC_VAULT  |0x9edf9b08406fa69a9dd5f73269f8a927b4f772d7|2021-09-26 15:01:20|77.0       |ETH         |
|Cool Cats|8875    |4        |0xErnestVault|0xdb6d9af38ecadaf48112a75ba9a8e5cd6dcba91e|2021-08-28 17:17:38|75.0       |ETH         |
|Cool Cats|4695    |1        |MetalMario   |0xad8357353ddf8095dd01376be71462d27db8cffe|2021-08-01 16:38:00|75.0       |ETH         |
|Cool Cats|3271    |2        |Driftershoots|0x9dbe56e65961146525d796bdc008225bd5915a4f|2021-10-06 18:26:08|69.69      |ETH         |
|Cool Cats|8344    |2        |MR_CC_VAULT  |0x9edf9b08406fa69a9dd5f73269f8a927b4f772d7|2021-08-24 21:55:00|69.42      |ETH         |
+---------+--------+---------+-------------+------------------------------------------+-------------------+-----------+------------+
only showing top 10 rows

+---------+--------------------+-------------------+
|      NFT|       owner_address|           txn_date|
+---------+--------------------+-------------------+
|Cool Cats|0x762b35b809ac426...|2021-10-05 01:44:29|
|Cool Cats|0x4c4a5490deefefa...|2021-08-20 00:45:13|
|Cool Cats|0xe13756351f9cbc4...|2021-10-07 14:48:23|
|Cool Cats|0x2f5170deea82309...|2021-10-08 02:33:07|
|Cool Cats|0xf5a9288eb6e86a3...|2021-08-07 17:52:48|
|Cool Cats|0x9edf9b08406fa69...|2021-09-26 15:01:20|
|Cool Cats|0xdb6d9af38ecadaf...|2021-08-28 17:17:38|
|Cool Cats|0xad8357353ddf809...|2021-08-01 16:38:00|
|Cool Cats|0x9dbe56e65961146...|2021-10-06 18:26:08|
|Cool Cats|0x9edf9b08406fa69...|2021-08-24 21:55:00|
|Cool Cats|0x9edf9b08406fa69...|2021-09-26 15:01:20|
|Cool Cats|0x9dbe56e65961146...|2021-10-06 18:24:17|
|Cool Cats|0xc96d32f17fa385d...|2021-09-26 15:14:46|
|Cool Cats|0x9dbe56e65961146...|2021-10-06 18:22:39|
|Cool Cats|0x3adc1e9b6c09c1f...|2021-10-06 18:32:38|
|Cool Cats|0x3adc1e9b6c09c1f...|2021-09-26 08:12:31|
|Cool Cats|0xf224837e13b1a74...|2022-01-10 15:38:58|
|Cool Cats|0x3c4882d561cbed5...|2021-09-26 18:56:29|
|Cool Cats|0x13812fc2e57d690...|2021-10-05 04:44:22|
|Cool Cats|0x904778b44bd12a1...|2022-01-02 22:54:39|
+---------+--------------------+-------------------+
only showing top 20 rows

+-----------------+------------------------------------------+
|NFT              |owner_address                             |
+-----------------+------------------------------------------+
|Meebits          |0x005e9eed36bfea0d05c0e8f36f32d4f4e08efacd|
|BoredApeYachtClub|0x020ca66c30bec2c4fe3861a94e4db4a498a35872|
|CryptoPunks      |0x040da2c464933005b6d1ffeccec7fb4025dc9ddb|
|CryptoPunks      |0x04ae2f0bda04f1405991d91c2e8420d6148369ea|
|Doodles          |0x052564eb0fd8b340803df55def89c25c432f43f4|
|BoredApeYachtClub|0x05c250120ce07ba6fe361b39ac344148435c25ca|
|BoredApeYachtClub|0x066317b90509069eb52474a38c212508f8a1211c|
|CryptoPunks      |0x06e63138f3241a420829bc125e6cb6bebf88c2c2|
|Meebits          |0x0845fc89c51b2bcd1c3b0db9dbca497d641ec7d3|
|Meebits          |0x09d4083ffd20d21acb9118465ad7c52ac8b548f7|
+-----------------+------------------------------------------+
only showing top 10 rows

2022-01-25T05:05:51.119+0000: [GC (Allocation Failure) [PSYoungGen: 1997810K->79852K(1981440K)] 2369755K->451804K(6255104K), 0.0540031 secs] [Times: user=0.14 sys=0.00, real=0.05 secs] 
+---------+-------------------+----------+
|NFT      |txn_date           |unix      |
+---------+-------------------+----------+
|Cool Cats|2021-10-05 01:44:29|1633398269|
|Cool Cats|2021-08-20 00:45:13|1629420313|
|Cool Cats|2021-10-07 14:48:23|1633618103|
|Cool Cats|2021-10-08 02:33:07|1633660387|
|Cool Cats|2021-08-07 17:52:48|1628358768|
|Cool Cats|2021-09-26 15:01:20|1632668480|
|Cool Cats|2021-08-28 17:17:38|1630171058|
|Cool Cats|2021-08-01 16:38:00|1627835880|
|Cool Cats|2021-10-06 18:26:08|1633544768|
|Cool Cats|2021-08-24 21:55:00|1629842100|
+---------+-------------------+----------+
only showing top 10 rows

2022-01-25T05:06:14.090+0000: [GC (Allocation Failure) [PSYoungGen: 1922540K->112620K(1955328K)] 2294492K->484581K(6228992K), 0.0841806 secs] [Times: user=0.16 sys=0.00, real=0.08 secs] 
Executing command, time = 1643087178678.
Executing command, time = 1643087179060.
Executing command, time = 1643087179177.
Out[108]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\ningest_token v2 uses a new API key so can be processed in parallel with ingest_eth\n\'\'\'\n\nfrom os import truncate\nimport sys\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport requests\nfrom requests.exceptions import HTTPError\nimport time\nimport logging\n\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\nnft_name=\'Cool Cats\'\n\n\ndef get_usd_price(unix):\n    url=f\'{cryptocompare_url}{unix}\'\n    api_key=cryptocompare_api_key\n    limit_exceeded=True\n    while limit_exceeded==True:\n        response=requests.get(url,params={\'api_key\':api_key})\n        message=response.json()\n        if message[\'ETH\']:\n            limit_exceeded=False\n            return message[\'ETH\'][\'USD\']\n        else:\n            time.sleep(0.5)\n            continue\n    return\n\n\n\ndef process_usd_data():\n    #path to the preprocessed reference data of Etherscan\n    CCompare_parquet_path=f\'{preprocessed_data_path}/{today}/CCompare/NFT={nft_name}/\'\n\n    logging.info(f"READING CRYPTOCOMPARE REFERENCE DATA")\n    CCompare_reference_DF=spark.read.parquet(CCompare_parquet_path)\n\n    logging.info(f"CALLING DOLLAR PRICE UDF")\n    dollar_udf=udf(lambda x : get_usd_price(x))\n    usd_price_df=CCompare_reference_DF.withColumn(\'USD_Rate\',dollar_udf(CCompare_reference_DF[\'unix\'])).drop(CCompare_reference_DF[\'unix\'])\n    logging.info(f"CACHEING DOLLAR UDF DATAFRAME TO PROCESSED LAYER")\n    usd_price_df.cache()\n    usd_price_df.show(10,truncate=False)\n    logging.info(f"WRITING DOLLAR UDF DATAFRAME TO PROCESSED LAYER")\n    usd_price_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/USD_Price/NFT={nft_name}/\')\n\n    return\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    process_usd_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'Out[109]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\nthis version (va1) is executable so can be called by airflow\n\'\'\'\n\nimport sys\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport time\nimport requests\n\nimport logging\n\n\n\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\n# file paths for blob storage\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n#nft_name=sys.argv[1]\nnft_name=\'Cool Cats\'\ndef get_eth_balance(eth_address):\n    url=etherscan_url\n    api_key=eth_api_key\n    param={\'ETH_balance\':{\'module\':\'account\',\\\n                        \'action\':\'balance\',\\\n                        \'address\':eth_address,\\\n                        \'tag\':\'latest\',\\\n                        \'apikey\':api_key}}\n    limit_exceeded=True\n    while limit_exceeded==True:\n        response=requests.get(url,params=param[\'ETH_balance\'])\n        message=response.json()\n        if message[\'result\']==\'Max rate limit reached\':\n            time.sleep(0.5)\n            continue\n        else:\n            limit_exceeded=False\n            return message[\'result\']\n    return\n\n\ndef process_eth_data():\n    #path to the preprocessed reference data of Etherscan\n    EScan_parquet_path=f\'{preprocessed_data_path}/{today}/EScan/NFT={nft_name}/\'\n\n    logging.info(f"READING ETHERSCAN REFERENCE DATA")\n    EScan_reference_DF=spark.read.parquet(EScan_parquet_path)\n    \n    logging.info(f"CALLING ETH BALANCE UDF")\n    eth_udf=udf(lambda x : get_eth_balance(x))\n    eth_balance_df=EScan_reference_DF.withColumn(\'ETH_Balance\',eth_udf(EScan_reference_DF[\'owner_address\']))\n    logging.info(f"CACHEING ETH UDF DATAFRAME TO PROCESSED LAYER")\n    eth_balance_df.cache()\n    eth_balance_df.show(10,truncate=False)\n    logging.info(f"WRITING ETH UDF DATAFRAME TO PROCESSED LAYER")\n    eth_balance_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/ETH_Balance/NFT={nft_name}/\')\n    return\n\nif __name__=="__main__":\n    process_eth_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'Out[110]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\nthis version (va1) is executable so can be called by airflow\n\'\'\'\nfrom os import truncate\nimport sys\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport time\nimport requests\nimport logging\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\nnft_name=\'Cool Cats\'\ndef get_token_balance(eth_address):\n    url=etherscan_url\n    api_key=token_api_key\n    token_addresses={\n    \'Wrapped_eth\':\'0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\',\n    \'Tether\':\'0xdac17f958d2ee523a2206206994597c13d831ec7\',\n    \'Usdc\':\'0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\'}\n    new_dict={}\n    for i in token_addresses.keys():\n        param={\'token_balance\':{\'module\':\'account\',\n                                \'action\':\'tokenbalance\',\\\n                                \'contractaddress\':token_addresses[i],\\\n                                \'address\':eth_address,\\\n                                \'tag\':\'latest\',\'apikey\':api_key}}\n        limit_exceeded=True\n        while limit_exceeded==True:\n            response=requests.get(url,params=param[\'token_balance\'])\n            message=response.json()\n            if message[\'result\']==\'Max rate limit reached\':\n                time.sleep(0.5)\n                continue\n            else:\n                limit_exceeded=False\n                new_dict[i]=message[\'result\']\n        \n    return new_dict\n\n\n\ndef process_token_data():\n    #path to the preprocessed reference data of Etherscan\n    EScan_parquet_path=f\'{preprocessed_data_path}/{today}/EScan/NFT={nft_name}/\'\n\n    logging.info(f"READING TOKEN REFERENCE DATA")\n    EScan_reference_DF=spark.read.parquet(EScan_parquet_path)\n\n    logging.info(f"CALLING TOKEN BALANCE UDF")\n    token_udf=udf(lambda x : get_token_balance(x),MapType(StringType(),StringType()))\n    token_balance_df=EScan_reference_DF.withColumn(\'Token_Balance\',token_udf(EScan_reference_DF[\'owner_address\']))\n    logging.info(f"CACHEING TOKEN UDF DATAFRAME TO PROCESSED LAYER")\n    token_balance_df.cache()\n    token_balance_df.show(10,truncate=False)\n    logging.info(f"WRITING TOKEN UDF DATAFRAME TO PROCESSED LAYER")\n    token_balance_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/Token_Balance/NFT={nft_name}/\')\n    \n    return\n\nif __name__=="__main__":\n    process_token_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'+------------------------------------------+--------------------+
|owner_address                             |ETH_Balance         |
+------------------------------------------+--------------------+
|0x0bf6305d4382c37a7c330604048ae9813ddade28|963047789316076440  |
|0x0c54a765c77a88d9cda0bd7ad9b10422848d92ef|9652244429414008593 |
|0x13812fc2e57d690dea7603c83c555af4be848328|544301852366801548  |
|0x2d8d75d4ba64efda74eead05ac6127df4e46efa9|76471918925753641500|
|0x2f5170deea823099d75f200ae0524b30c3701881|730125946426314096  |
|0x32ae912d4abfde382eb5cd4eadd2a3daab914d67|5337643202420827979 |
|0x34978faf3a9f469da7248d1365ddf69ac099588c|68795974892463295647|
|0x3adc1e9b6c09c1fbd96de6c6ec5b5fea7036fd06|4101808227051244405 |
|0x3c4882d561cbed5ef467783a0e4091cf069708b7|4993051058601384440 |
|0x3d280fde2ddb59323c891cf30995e1862510342f|1592758558738255895 |
+------------------------------------------+--------------------+
only showing top 10 rows

Executing command, time = 1643087214630.
Out[111]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\nthis version (va1) is executable so can be called by airflow\n\'\'\'\n\nimport sys\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport time\nimport requests\n\nimport logging\n\n\n\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\n# file paths for blob storage\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n#nft_name=sys.argv[1]\nnft_name=\'BoredApeYachtClub\'\ndef get_eth_balance(eth_address):\n    url=etherscan_url\n    api_key=eth_api_key\n    param={\'ETH_balance\':{\'module\':\'account\',\\\n                        \'action\':\'balance\',\\\n                        \'address\':eth_address,\\\n                        \'tag\':\'latest\',\\\n                        \'apikey\':api_key}}\n    limit_exceeded=True\n    while limit_exceeded==True:\n        response=requests.get(url,params=param[\'ETH_balance\'])\n        message=response.json()\n        if message[\'result\']==\'Max rate limit reached\':\n            time.sleep(0.5)\n            continue\n        else:\n            limit_exceeded=False\n            return message[\'result\']\n    return\n\n\ndef process_eth_data():\n    #path to the preprocessed reference data of Etherscan\n    EScan_parquet_path=f\'{preprocessed_data_path}/{today}/EScan/NFT={nft_name}/\'\n\n    logging.info(f"READING ETHERSCAN REFERENCE DATA")\n    EScan_reference_DF=spark.read.parquet(EScan_parquet_path)\n    \n    logging.info(f"CALLING ETH BALANCE UDF")\n    eth_udf=udf(lambda x : get_eth_balance(x))\n    eth_balance_df=EScan_reference_DF.withColumn(\'ETH_Balance\',eth_udf(EScan_reference_DF[\'owner_address\']))\n    logging.info(f"CACHEING ETH UDF DATAFRAME TO PROCESSED LAYER")\n    eth_balance_df.cache()\n    eth_balance_df.show(10,truncate=False)\n    logging.info(f"WRITING ETH UDF DATAFRAME TO PROCESSED LAYER")\n    eth_balance_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/ETH_Balance/NFT={nft_name}/\')\n    return\n\nif __name__=="__main__":\n    process_eth_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'+-------------------+--------+
|txn_date           |USD_Rate|
+-------------------+--------+
|2021-10-05 01:44:29|3516.09 |
|2021-08-20 00:45:13|3286.5  |
|2021-10-07 14:48:23|3588.12 |
|2021-10-08 02:33:07|3562.84 |
|2021-08-07 17:52:48|3162.43 |
|2021-09-26 15:01:20|3064.21 |
|2021-08-28 17:17:38|3246.78 |
|2021-08-01 16:38:00|2556.41 |
|2021-10-06 18:26:08|3576.08 |
|2021-08-24 21:55:00|3172.57 |
+-------------------+--------+
only showing top 10 rows

Executing command, time = 1643087229183.
Out[112]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\ningest_token v2 uses a new API key so can be processed in parallel with ingest_eth\n\'\'\'\n\nfrom os import truncate\nimport sys\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport requests\nfrom requests.exceptions import HTTPError\nimport time\nimport logging\n\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\nnft_name=\'BoredApeYachtClub\'\n\n\ndef get_usd_price(unix):\n    url=f\'{cryptocompare_url}{unix}\'\n    api_key=cryptocompare_api_key\n    limit_exceeded=True\n    while limit_exceeded==True:\n        response=requests.get(url,params={\'api_key\':api_key})\n        message=response.json()\n        if message[\'ETH\']:\n            limit_exceeded=False\n            return message[\'ETH\'][\'USD\']\n        else:\n            time.sleep(0.5)\n            continue\n    return\n\n\n\ndef process_usd_data():\n    #path to the preprocessed reference data of Etherscan\n    CCompare_parquet_path=f\'{preprocessed_data_path}/{today}/CCompare/NFT={nft_name}/\'\n\n    logging.info(f"READING CRYPTOCOMPARE REFERENCE DATA")\n    CCompare_reference_DF=spark.read.parquet(CCompare_parquet_path)\n\n    logging.info(f"CALLING DOLLAR PRICE UDF")\n    dollar_udf=udf(lambda x : get_usd_price(x))\n    usd_price_df=CCompare_reference_DF.withColumn(\'USD_Rate\',dollar_udf(CCompare_reference_DF[\'unix\'])).drop(CCompare_reference_DF[\'unix\'])\n    logging.info(f"CACHEING DOLLAR UDF DATAFRAME TO PROCESSED LAYER")\n    usd_price_df.cache()\n    usd_price_df.show(10,truncate=False)\n    logging.info(f"WRITING DOLLAR UDF DATAFRAME TO PROCESSED LAYER")\n    usd_price_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/USD_Price/NFT={nft_name}/\')\n\n    return\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    process_usd_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'+------------------------------------------+-----------------------------------------------------------------------+
|owner_address                             |Token_Balance                                                          |
+------------------------------------------+-----------------------------------------------------------------------+
|0x0bf6305d4382c37a7c330604048ae9813ddade28|{Usdc -> 2236180267, Tether -> 5906701136, Wrapped_eth -> 0}           |
|0x0c54a765c77a88d9cda0bd7ad9b10422848d92ef|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                             |
|0x13812fc2e57d690dea7603c83c555af4be848328|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                             |
|0x2d8d75d4ba64efda74eead05ac6127df4e46efa9|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 1645828330611181426}           |
|0x2f5170deea823099d75f200ae0524b30c3701881|{Usdc -> 0, Tether -> 47375138589, Wrapped_eth -> 13000000000000000000}|
|0x32ae912d4abfde382eb5cd4eadd2a3daab914d67|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 187625000000000000}            |
|0x34978faf3a9f469da7248d1365ddf69ac099588c|{Usdc -> 863581886, Tether -> 0, Wrapped_eth -> 0}                     |
|0x3adc1e9b6c09c1fbd96de6c6ec5b5fea7036fd06|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                             |
|0x3c4882d561cbed5ef467783a0e4091cf069708b7|{Usdc -> 8233224058, Tether -> 0, Wrapped_eth -> 0}                    |
|0x3d280fde2ddb59323c891cf30995e1862510342f|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                             |
+------------------------------------------+-----------------------------------------------------------------------+
only showing top 10 rows

+------------------------------------------+---------------------+
|owner_address                             |ETH_Balance          |
+------------------------------------------+---------------------+
|0x020ca66c30bec2c4fe3861a94e4db4a498a35872|652093944375984957578|
|0x05c250120ce07ba6fe361b39ac344148435c25ca|1532151039528069964  |
|0x066317b90509069eb52474a38c212508f8a1211c|830801000000000000000|
|0x14ae8100ea85a11bbb36578f83ab1b5c1cfdd61c|5951061998337252560  |
|0x1622ebc67a1db29e276ad11a020448b5307991dd|6915657736799161524  |
|0x19cb41c7f8baefa749adf20bef12c0c77313e88f|459680787925329352   |
|0x1dc9fb024fda92a8f409f21bdf2c7d46d11315be|1768778377926835516  |
|0x1e89a91408cb1dfe9fddeee89d888fa91ea0e25d|960591614864504479   |
|0x21faa7406de0e6f99c313375b4e0dcad3ea38e2a|102791382484636510872|
|0x222a50ddb9126d372eb5811a727581cb6dc31237|2837897315125555381  |
+------------------------------------------+---------------------+
only showing top 10 rows

Executing command, time = 1643087242723.
Out[113]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\nthis version (va1) is executable so can be called by airflow\n\'\'\'\nfrom os import truncate\nimport sys\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport time\nimport requests\nimport logging\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\nnft_name=\'BoredApeYachtClub\'\ndef get_token_balance(eth_address):\n    url=etherscan_url\n    api_key=token_api_key\n    token_addresses={\n    \'Wrapped_eth\':\'0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\',\n    \'Tether\':\'0xdac17f958d2ee523a2206206994597c13d831ec7\',\n    \'Usdc\':\'0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\'}\n    new_dict={}\n    for i in token_addresses.keys():\n        param={\'token_balance\':{\'module\':\'account\',\n                                \'action\':\'tokenbalance\',\\\n                                \'contractaddress\':token_addresses[i],\\\n                                \'address\':eth_address,\\\n                                \'tag\':\'latest\',\'apikey\':api_key}}\n        limit_exceeded=True\n        while limit_exceeded==True:\n            response=requests.get(url,params=param[\'token_balance\'])\n            message=response.json()\n            if message[\'result\']==\'Max rate limit reached\':\n                time.sleep(0.5)\n                continue\n            else:\n                limit_exceeded=False\n                new_dict[i]=message[\'result\']\n        \n    return new_dict\n\n\n\ndef process_token_data():\n    #path to the preprocessed reference data of Etherscan\n    EScan_parquet_path=f\'{preprocessed_data_path}/{today}/EScan/NFT={nft_name}/\'\n\n    logging.info(f"READING TOKEN REFERENCE DATA")\n    EScan_reference_DF=spark.read.parquet(EScan_parquet_path)\n\n    logging.info(f"CALLING TOKEN BALANCE UDF")\n    token_udf=udf(lambda x : get_token_balance(x),MapType(StringType(),StringType()))\n    token_balance_df=EScan_reference_DF.withColumn(\'Token_Balance\',token_udf(EScan_reference_DF[\'owner_address\']))\n    logging.info(f"CACHEING TOKEN UDF DATAFRAME TO PROCESSED LAYER")\n    token_balance_df.cache()\n    token_balance_df.show(10,truncate=False)\n    logging.info(f"WRITING TOKEN UDF DATAFRAME TO PROCESSED LAYER")\n    token_balance_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/Token_Balance/NFT={nft_name}/\')\n    \n    return\n\nif __name__=="__main__":\n    process_token_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'Executing command, time = 1643087248397.
Out[114]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\nthis version (va1) is executable so can be called by airflow\n\'\'\'\n\nimport sys\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport time\nimport requests\n\nimport logging\n\n\n\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\n# file paths for blob storage\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n#nft_name=sys.argv[1]\nnft_name=\'CryptoPunks\'\ndef get_eth_balance(eth_address):\n    url=etherscan_url\n    api_key=eth_api_key\n    param={\'ETH_balance\':{\'module\':\'account\',\\\n                        \'action\':\'balance\',\\\n                        \'address\':eth_address,\\\n                        \'tag\':\'latest\',\\\n                        \'apikey\':api_key}}\n    limit_exceeded=True\n    while limit_exceeded==True:\n        response=requests.get(url,params=param[\'ETH_balance\'])\n        message=response.json()\n        if message[\'result\']==\'Max rate limit reached\':\n            time.sleep(0.5)\n            continue\n        else:\n            limit_exceeded=False\n            return message[\'result\']\n    return\n\n\ndef process_eth_data():\n    #path to the preprocessed reference data of Etherscan\n    EScan_parquet_path=f\'{preprocessed_data_path}/{today}/EScan/NFT={nft_name}/\'\n\n    logging.info(f"READING ETHERSCAN REFERENCE DATA")\n    EScan_reference_DF=spark.read.parquet(EScan_parquet_path)\n    \n    logging.info(f"CALLING ETH BALANCE UDF")\n    eth_udf=udf(lambda x : get_eth_balance(x))\n    eth_balance_df=EScan_reference_DF.withColumn(\'ETH_Balance\',eth_udf(EScan_reference_DF[\'owner_address\']))\n    logging.info(f"CACHEING ETH UDF DATAFRAME TO PROCESSED LAYER")\n    eth_balance_df.cache()\n    eth_balance_df.show(10,truncate=False)\n    logging.info(f"WRITING ETH UDF DATAFRAME TO PROCESSED LAYER")\n    eth_balance_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/ETH_Balance/NFT={nft_name}/\')\n    return\n\nif __name__=="__main__":\n    process_eth_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'2022-01-25T05:07:36.782+0000: [GC (Allocation Failure) [PSYoungGen: 1955308K->85159K(1989632K)] 2327269K->457127K(6263296K), 0.0642183 secs] [Times: user=0.15 sys=0.00, real=0.07 secs] 
+-------------------+--------+
|txn_date           |USD_Rate|
+-------------------+--------+
|2021-09-30 01:28:47|3000.83 |
|2021-09-06 21:02:29|3928.4  |
|2021-10-19 23:15:59|3877.45 |
|2021-09-02 14:59:41|3787.7  |
|2021-09-17 16:43:57|3398.82 |
|2021-08-26 19:00:15|3093.62 |
|2021-12-28 22:17:44|3793.54 |
|2021-10-14 12:57:22|3791.23 |
|2021-08-30 03:49:45|3228.46 |
|2022-01-09 00:31:32|3150.83 |
+-------------------+--------+
only showing top 10 rows

+------------------------------------------+---------------------+
|owner_address                             |ETH_Balance          |
+------------------------------------------+---------------------+
|0x040da2c464933005b6d1ffeccec7fb4025dc9ddb|348286866000000000   |
|0x04ae2f0bda04f1405991d91c2e8420d6148369ea|210106156418171898   |
|0x06e63138f3241a420829bc125e6cb6bebf88c2c2|584320090945613308   |
|0x0a8f4037729accb854da856431a87b8a264d8c40|0                    |
|0x1251122f1d77fa46e1e576c4fd6dd56ab17812ff|0                    |
|0x1db12c2a7c803567c9fd59a202504edf0e56ca78|119050000000000000000|
|0x22eab1c78521596f9d6d73dd878778009c39317c|10308627837000000000 |
|0x266892ed0d40ea5c37f3e0239537999c13468311|0                    |
|0x2e675eeae4747c248bfddbafaa3a8a2fdddaa44b|551848095532668789   |
|0x34669322bdfca9e801ca334e7b0e6d69d1f87137|270971634624580300879|
+------------------------------------------+---------------------+
only showing top 10 rows

Executing command, time = 1643087283797.
Executing command, time = 1643087285865.
Out[115]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\ningest_token v2 uses a new API key so can be processed in parallel with ingest_eth\n\'\'\'\n\nfrom os import truncate\nimport sys\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport requests\nfrom requests.exceptions import HTTPError\nimport time\nimport logging\n\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\nnft_name=\'CryptoPunks\'\n\n\ndef get_usd_price(unix):\n    url=f\'{cryptocompare_url}{unix}\'\n    api_key=cryptocompare_api_key\n    limit_exceeded=True\n    while limit_exceeded==True:\n        response=requests.get(url,params={\'api_key\':api_key})\n        message=response.json()\n        if message[\'ETH\']:\n            limit_exceeded=False\n            return message[\'ETH\'][\'USD\']\n        else:\n            time.sleep(0.5)\n            continue\n    return\n\n\n\ndef process_usd_data():\n    #path to the preprocessed reference data of Etherscan\n    CCompare_parquet_path=f\'{preprocessed_data_path}/{today}/CCompare/NFT={nft_name}/\'\n\n    logging.info(f"READING CRYPTOCOMPARE REFERENCE DATA")\n    CCompare_reference_DF=spark.read.parquet(CCompare_parquet_path)\n\n    logging.info(f"CALLING DOLLAR PRICE UDF")\n    dollar_udf=udf(lambda x : get_usd_price(x))\n    usd_price_df=CCompare_reference_DF.withColumn(\'USD_Rate\',dollar_udf(CCompare_reference_DF[\'unix\'])).drop(CCompare_reference_DF[\'unix\'])\n    logging.info(f"CACHEING DOLLAR UDF DATAFRAME TO PROCESSED LAYER")\n    usd_price_df.cache()\n    usd_price_df.show(10,truncate=False)\n    logging.info(f"WRITING DOLLAR UDF DATAFRAME TO PROCESSED LAYER")\n    usd_price_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/USD_Price/NFT={nft_name}/\')\n\n    return\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    process_usd_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'Out[116]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\nthis version (va1) is executable so can be called by airflow\n\'\'\'\n\nimport sys\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport time\nimport requests\n\nimport logging\n\n\n\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\n# file paths for blob storage\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n#nft_name=sys.argv[1]\nnft_name=\'Doodles\'\ndef get_eth_balance(eth_address):\n    url=etherscan_url\n    api_key=eth_api_key\n    param={\'ETH_balance\':{\'module\':\'account\',\\\n                        \'action\':\'balance\',\\\n                        \'address\':eth_address,\\\n                        \'tag\':\'latest\',\\\n                        \'apikey\':api_key}}\n    limit_exceeded=True\n    while limit_exceeded==True:\n        response=requests.get(url,params=param[\'ETH_balance\'])\n        message=response.json()\n        if message[\'result\']==\'Max rate limit reached\':\n            time.sleep(0.5)\n            continue\n        else:\n            limit_exceeded=False\n            return message[\'result\']\n    return\n\n\ndef process_eth_data():\n    #path to the preprocessed reference data of Etherscan\n    EScan_parquet_path=f\'{preprocessed_data_path}/{today}/EScan/NFT={nft_name}/\'\n\n    logging.info(f"READING ETHERSCAN REFERENCE DATA")\n    EScan_reference_DF=spark.read.parquet(EScan_parquet_path)\n    \n    logging.info(f"CALLING ETH BALANCE UDF")\n    eth_udf=udf(lambda x : get_eth_balance(x))\n    eth_balance_df=EScan_reference_DF.withColumn(\'ETH_Balance\',eth_udf(EScan_reference_DF[\'owner_address\']))\n    logging.info(f"CACHEING ETH UDF DATAFRAME TO PROCESSED LAYER")\n    eth_balance_df.cache()\n    eth_balance_df.show(10,truncate=False)\n    logging.info(f"WRITING ETH UDF DATAFRAME TO PROCESSED LAYER")\n    eth_balance_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/ETH_Balance/NFT={nft_name}/\')\n    return\n\nif __name__=="__main__":\n    process_eth_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'+------------------------------------------+------------------------------------------------------------------+
|owner_address                             |Token_Balance                                                     |
+------------------------------------------+------------------------------------------------------------------+
|0x020ca66c30bec2c4fe3861a94e4db4a498a35872|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                        |
|0x05c250120ce07ba6fe361b39ac344148435c25ca|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                        |
|0x066317b90509069eb52474a38c212508f8a1211c|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                        |
|0x14ae8100ea85a11bbb36578f83ab1b5c1cfdd61c|{Usdc -> 435379993, Tether -> 0, Wrapped_eth -> 66100000000000000}|
|0x1622ebc67a1db29e276ad11a020448b5307991dd|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                        |
|0x19cb41c7f8baefa749adf20bef12c0c77313e88f|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                        |
|0x1dc9fb024fda92a8f409f21bdf2c7d46d11315be|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                        |
|0x1e89a91408cb1dfe9fddeee89d888fa91ea0e25d|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                        |
|0x21faa7406de0e6f99c313375b4e0dcad3ea38e2a|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 133000000000000000000}    |
|0x222a50ddb9126d372eb5811a727581cb6dc31237|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                        |
+------------------------------------------+------------------------------------------------------------------+
only showing top 10 rows

Executing command, time = 1643087300875.
Out[117]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\nthis version (va1) is executable so can be called by airflow\n\'\'\'\nfrom os import truncate\nimport sys\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport time\nimport requests\nimport logging\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\nnft_name=\'CryptoPunks\'\ndef get_token_balance(eth_address):\n    url=etherscan_url\n    api_key=token_api_key\n    token_addresses={\n    \'Wrapped_eth\':\'0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\',\n    \'Tether\':\'0xdac17f958d2ee523a2206206994597c13d831ec7\',\n    \'Usdc\':\'0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\'}\n    new_dict={}\n    for i in token_addresses.keys():\n        param={\'token_balance\':{\'module\':\'account\',\n                                \'action\':\'tokenbalance\',\\\n                                \'contractaddress\':token_addresses[i],\\\n                                \'address\':eth_address,\\\n                                \'tag\':\'latest\',\'apikey\':api_key}}\n        limit_exceeded=True\n        while limit_exceeded==True:\n            response=requests.get(url,params=param[\'token_balance\'])\n            message=response.json()\n            if message[\'result\']==\'Max rate limit reached\':\n                time.sleep(0.5)\n                continue\n            else:\n                limit_exceeded=False\n                new_dict[i]=message[\'result\']\n        \n    return new_dict\n\n\n\ndef process_token_data():\n    #path to the preprocessed reference data of Etherscan\n    EScan_parquet_path=f\'{preprocessed_data_path}/{today}/EScan/NFT={nft_name}/\'\n\n    logging.info(f"READING TOKEN REFERENCE DATA")\n    EScan_reference_DF=spark.read.parquet(EScan_parquet_path)\n\n    logging.info(f"CALLING TOKEN BALANCE UDF")\n    token_udf=udf(lambda x : get_token_balance(x),MapType(StringType(),StringType()))\n    token_balance_df=EScan_reference_DF.withColumn(\'Token_Balance\',token_udf(EScan_reference_DF[\'owner_address\']))\n    logging.info(f"CACHEING TOKEN UDF DATAFRAME TO PROCESSED LAYER")\n    token_balance_df.cache()\n    token_balance_df.show(10,truncate=False)\n    logging.info(f"WRITING TOKEN UDF DATAFRAME TO PROCESSED LAYER")\n    token_balance_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/Token_Balance/NFT={nft_name}/\')\n    \n    return\n\nif __name__=="__main__":\n    process_token_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'+------------------------------------------+---------------------+
|owner_address                             |ETH_Balance          |
+------------------------------------------+---------------------+
|0x052564eb0fd8b340803df55def89c25c432f43f4|184117007241109256055|
|0x13c59c501f8557fb44724df06a85ccaeefc90374|18958087129672789    |
|0x1d3eb89c3a5c5ec4808ac341732efd45c0f1703d|4010719111846929588  |
|0x224b3f081075c1bc10e8fce9c03719214f714e23|7600596265672981185  |
|0x2a584a403ec9ad290a864465654b3a32a4588d37|1958225399378314023  |
|0x4b4c13434aac5e99645a4d9e59fe497b3318f50f|6578216422057690448  |
|0x4f3d9f60c500a79beac465c50a60e1088ae75622|178246826780913405   |
|0x5b9a65eabc2cbfc5eceec377afa4399f702eb3d4|1038399266936123697  |
|0x5cb58a3fa9b02ae11f443b3adc231172356eccd7|929277016359425567   |
|0x644a79558151a29c3364cb1152dfe2763f963101|18497231772108998000 |
+------------------------------------------+---------------------+
only showing top 10 rows

Executing command, time = 1643087315598.
Out[118]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\nthis version (va1) is executable so can be called by airflow\n\'\'\'\n\nimport sys\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport time\nimport requests\n\nimport logging\n\n\n\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\n# file paths for blob storage\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\nnft_name=\'Meebits\'\ndef get_eth_balance(eth_address):\n    url=etherscan_url\n    api_key=eth_api_key\n    param={\'ETH_balance\':{\'module\':\'account\',\\\n                        \'action\':\'balance\',\\\n                        \'address\':eth_address,\\\n                        \'tag\':\'latest\',\\\n                        \'apikey\':api_key}}\n    limit_exceeded=True\n    while limit_exceeded==True:\n        response=requests.get(url,params=param[\'ETH_balance\'])\n        message=response.json()\n        if message[\'result\']==\'Max rate limit reached\':\n            time.sleep(0.5)\n            continue\n        else:\n            limit_exceeded=False\n            return message[\'result\']\n    return\n\n\ndef process_eth_data():\n    #path to the preprocessed reference data of Etherscan\n    EScan_parquet_path=f\'{preprocessed_data_path}/{today}/EScan/NFT={nft_name}/\'\n\n    logging.info(f"READING ETHERSCAN REFERENCE DATA")\n    EScan_reference_DF=spark.read.parquet(EScan_parquet_path)\n    \n    logging.info(f"CALLING ETH BALANCE UDF")\n    eth_udf=udf(lambda x : get_eth_balance(x))\n    eth_balance_df=EScan_reference_DF.withColumn(\'ETH_Balance\',eth_udf(EScan_reference_DF[\'owner_address\']))\n    logging.info(f"CACHEING ETH UDF DATAFRAME TO PROCESSED LAYER")\n    eth_balance_df.cache()\n    eth_balance_df.show(10,truncate=False)\n    logging.info(f"WRITING ETH UDF DATAFRAME TO PROCESSED LAYER")\n    eth_balance_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/ETH_Balance/NFT={nft_name}/\')\n    return\n\nif __name__=="__main__":\n    process_eth_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'+-------------------+--------+
|txn_date           |USD_Rate|
+-------------------+--------+
|2021-10-28 23:50:37|4288.22 |
|2021-03-11 00:48:39|1827.06 |
|2021-03-11 20:57:01|1827.06 |
|2021-12-09 20:38:17|4111.92 |
|2021-07-30 21:24:47|2463.61 |
|2021-09-11 18:41:23|3266.43 |
|2021-07-30 18:36:56|2463.61 |
|2021-08-24 06:34:02|3172.57 |
|2021-08-06 18:18:56|2892.36 |
|2021-09-04 21:39:01|3887.01 |
+-------------------+--------+
only showing top 10 rows

Executing command, time = 1643087334844.
Out[119]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\ningest_token v2 uses a new API key so can be processed in parallel with ingest_eth\n\'\'\'\n\nfrom os import truncate\nimport sys\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport requests\nfrom requests.exceptions import HTTPError\nimport time\nimport logging\n\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\nnft_name=\'Doodles\'\n\n\ndef get_usd_price(unix):\n    url=f\'{cryptocompare_url}{unix}\'\n    api_key=cryptocompare_api_key\n    limit_exceeded=True\n    while limit_exceeded==True:\n        response=requests.get(url,params={\'api_key\':api_key})\n        message=response.json()\n        if message[\'ETH\']:\n            limit_exceeded=False\n            return message[\'ETH\'][\'USD\']\n        else:\n            time.sleep(0.5)\n            continue\n    return\n\n\n\ndef process_usd_data():\n    #path to the preprocessed reference data of Etherscan\n    CCompare_parquet_path=f\'{preprocessed_data_path}/{today}/CCompare/NFT={nft_name}/\'\n\n    logging.info(f"READING CRYPTOCOMPARE REFERENCE DATA")\n    CCompare_reference_DF=spark.read.parquet(CCompare_parquet_path)\n\n    logging.info(f"CALLING DOLLAR PRICE UDF")\n    dollar_udf=udf(lambda x : get_usd_price(x))\n    usd_price_df=CCompare_reference_DF.withColumn(\'USD_Rate\',dollar_udf(CCompare_reference_DF[\'unix\'])).drop(CCompare_reference_DF[\'unix\'])\n    logging.info(f"CACHEING DOLLAR UDF DATAFRAME TO PROCESSED LAYER")\n    usd_price_df.cache()\n    usd_price_df.show(10,truncate=False)\n    logging.info(f"WRITING DOLLAR UDF DATAFRAME TO PROCESSED LAYER")\n    usd_price_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/USD_Price/NFT={nft_name}/\')\n\n    return\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    process_usd_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'+------------------------------------------+---------------------+
|owner_address                             |ETH_Balance          |
+------------------------------------------+---------------------+
|0x005e9eed36bfea0d05c0e8f36f32d4f4e08efacd|12447652205501627982 |
|0x0845fc89c51b2bcd1c3b0db9dbca497d641ec7d3|203699378274139629   |
|0x09d4083ffd20d21acb9118465ad7c52ac8b548f7|3106606561824616971  |
|0x1e611bef4bbcb562d2f1e0784084a75a7e7402a8|422383032976745050   |
|0x1e898058a3404b9cb4a1ebe0190c45bf84226ce6|22706289742359392    |
|0x362b638b43f767350ac0a01b67baad825c108f3d|6057409127894597064  |
|0x4c4083b2cc9d433207a9c811865fd93b8902c0f9|0                    |
|0x53ede7cae3eb6a7d11429fe589c0278c9acbe21a|3137597476722580916  |
|0x56178626332fc530561535eeaa914b863aa455f2|104102812614710658691|
|0x63de6063eed48e863ef4b316159630ebaf897c40|492554712185714115   |
+------------------------------------------+---------------------+
only showing top 10 rows

Executing command, time = 1643087348922.
Out[120]: '\'\'\'Transformation_to_structured script\'s purpose is to \nClean, validate and structure Etherscan and Cryptocompare Enrichment data\n\'\'\'\n\nimport sys\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport logging\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\n\n\ndef Structured_transformation_eth():\n    today=datetime.date.today().strftime(\'%m-%d-%y\')\n    # reading EtherScan Token and ETH DF from processed and writing to structure\n\n    logging.info(f"CREATING ETHERSCAN ETH DATAFRAME FROM PROCESSED")\n    EScan_ETH_DF=spark.read.parquet(f\'{processed_data_path}{today}/ETH_Balance/NFT=**/\')\n    structured_ETH_DF=EScan_ETH_DF.select(\n    EScan_ETH_DF[\'owner_address\'],\\\n    format_number((EScan_ETH_DF[\'ETH_Balance\'].cast(FloatType())/10**18),2).alias(\'ETH\'))\n\n    logging.info(f"WRITING ETHERSCAN TOKEN DATAFRAME TO STRUCTURED")\n    structured_ETH_DF.show(10,truncate=False)\n    structured_ETH_DF.write.mode(\'overwrite\').parquet(f\'{structured_data_path}{today}/ETH_Balance/\')\n\n    \n    return\n\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    Structured_transformation_eth()\n'+------------------------------------------+------------------------------------------------------+
|owner_address                             |Token_Balance                                         |
+------------------------------------------+------------------------------------------------------+
|0x040da2c464933005b6d1ffeccec7fb4025dc9ddb|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}            |
|0x04ae2f0bda04f1405991d91c2e8420d6148369ea|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}            |
|0x06e63138f3241a420829bc125e6cb6bebf88c2c2|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}            |
|0x0a8f4037729accb854da856431a87b8a264d8c40|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}            |
|0x1251122f1d77fa46e1e576c4fd6dd56ab17812ff|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}            |
|0x1db12c2a7c803567c9fd59a202504edf0e56ca78|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}            |
|0x22eab1c78521596f9d6d73dd878778009c39317c|{Usdc -> 0, Tether -> 208952523762, Wrapped_eth -> 0} |
|0x266892ed0d40ea5c37f3e0239537999c13468311|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}            |
|0x2e675eeae4747c248bfddbafaa3a8a2fdddaa44b|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}            |
|0x34669322bdfca9e801ca334e7b0e6d69d1f87137|{Usdc -> 0, Tether -> 1542262769000, Wrapped_eth -> 0}|
+------------------------------------------+------------------------------------------------------+
only showing top 10 rows

2022-01-25T05:09:19.265+0000: [GC (Allocation Failure) [PSYoungGen: 1920702K->93146K(1984000K)] 2292671K->465115K(6257664K), 0.0708334 secs] [Times: user=0.16 sys=0.00, real=0.06 secs] 
+------------------------------------------+------+
|owner_address                             |ETH   |
+------------------------------------------+------+
|0x020ca66c30bec2c4fe3861a94e4db4a498a35872|652.09|
|0x05c250120ce07ba6fe361b39ac344148435c25ca|1.53  |
|0x066317b90509069eb52474a38c212508f8a1211c|830.80|
|0x14ae8100ea85a11bbb36578f83ab1b5c1cfdd61c|5.95  |
|0x1622ebc67a1db29e276ad11a020448b5307991dd|6.92  |
|0x19cb41c7f8baefa749adf20bef12c0c77313e88f|0.46  |
|0x1dc9fb024fda92a8f409f21bdf2c7d46d11315be|1.77  |
|0x1e89a91408cb1dfe9fddeee89d888fa91ea0e25d|0.96  |
|0x21faa7406de0e6f99c313375b4e0dcad3ea38e2a|102.79|
|0x222a50ddb9126d372eb5811a727581cb6dc31237|2.84  |
+------------------------------------------+------+
only showing top 10 rows

Executing command, time = 1643087362388.
Out[121]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\nthis version (va1) is executable so can be called by airflow\n\'\'\'\nfrom os import truncate\nimport sys\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport time\nimport requests\nimport logging\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\nnft_name=\'Doodles\'\ndef get_token_balance(eth_address):\n    url=etherscan_url\n    api_key=token_api_key\n    token_addresses={\n    \'Wrapped_eth\':\'0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\',\n    \'Tether\':\'0xdac17f958d2ee523a2206206994597c13d831ec7\',\n    \'Usdc\':\'0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\'}\n    new_dict={}\n    for i in token_addresses.keys():\n        param={\'token_balance\':{\'module\':\'account\',\n                                \'action\':\'tokenbalance\',\\\n                                \'contractaddress\':token_addresses[i],\\\n                                \'address\':eth_address,\\\n                                \'tag\':\'latest\',\'apikey\':api_key}}\n        limit_exceeded=True\n        while limit_exceeded==True:\n            response=requests.get(url,params=param[\'token_balance\'])\n            message=response.json()\n            if message[\'result\']==\'Max rate limit reached\':\n                time.sleep(0.5)\n                continue\n            else:\n                limit_exceeded=False\n                new_dict[i]=message[\'result\']\n        \n    return new_dict\n\n\n\ndef process_token_data():\n    #path to the preprocessed reference data of Etherscan\n    EScan_parquet_path=f\'{preprocessed_data_path}/{today}/EScan/NFT={nft_name}/\'\n\n    logging.info(f"READING TOKEN REFERENCE DATA")\n    EScan_reference_DF=spark.read.parquet(EScan_parquet_path)\n\n    logging.info(f"CALLING TOKEN BALANCE UDF")\n    token_udf=udf(lambda x : get_token_balance(x),MapType(StringType(),StringType()))\n    token_balance_df=EScan_reference_DF.withColumn(\'Token_Balance\',token_udf(EScan_reference_DF[\'owner_address\']))\n    logging.info(f"CACHEING TOKEN UDF DATAFRAME TO PROCESSED LAYER")\n    token_balance_df.cache()\n    token_balance_df.show(10,truncate=False)\n    logging.info(f"WRITING TOKEN UDF DATAFRAME TO PROCESSED LAYER")\n    token_balance_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/Token_Balance/NFT={nft_name}/\')\n    \n    return\n\nif __name__=="__main__":\n    process_token_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'+-------------------+--------+
|txn_date           |USD_Rate|
+-------------------+--------+
|2022-01-05 18:16:54|3536.77 |
|2022-01-07 20:48:56|3196.47 |
|2022-01-09 02:56:59|3150.83 |
|2022-01-05 13:33:44|3536.77 |
|2022-01-06 23:16:53|3406.48 |
|2022-01-04 19:34:29|3785.67 |
|2022-01-07 01:49:56|3196.47 |
|2022-01-12 18:54:51|3373.03 |
|2022-01-09 01:41:00|3150.83 |
|2022-01-04 20:54:15|3785.67 |
+-------------------+--------+
only showing top 10 rows

Executing command, time = 1643087389543.
Out[122]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\ningest_token v2 uses a new API key so can be processed in parallel with ingest_eth\n\'\'\'\n\nfrom os import truncate\nimport sys\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport requests\nfrom requests.exceptions import HTTPError\nimport time\nimport logging\n\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\nnft_name=\'Meebits\'\n\n\ndef get_usd_price(unix):\n    url=f\'{cryptocompare_url}{unix}\'\n    api_key=cryptocompare_api_key\n    limit_exceeded=True\n    while limit_exceeded==True:\n        response=requests.get(url,params={\'api_key\':api_key})\n        message=response.json()\n        if message[\'ETH\']:\n            limit_exceeded=False\n            return message[\'ETH\'][\'USD\']\n        else:\n            time.sleep(0.5)\n            continue\n    return\n\n\n\ndef process_usd_data():\n    #path to the preprocessed reference data of Etherscan\n    CCompare_parquet_path=f\'{preprocessed_data_path}/{today}/CCompare/NFT={nft_name}/\'\n\n    logging.info(f"READING CRYPTOCOMPARE REFERENCE DATA")\n    CCompare_reference_DF=spark.read.parquet(CCompare_parquet_path)\n\n    logging.info(f"CALLING DOLLAR PRICE UDF")\n    dollar_udf=udf(lambda x : get_usd_price(x))\n    usd_price_df=CCompare_reference_DF.withColumn(\'USD_Rate\',dollar_udf(CCompare_reference_DF[\'unix\'])).drop(CCompare_reference_DF[\'unix\'])\n    logging.info(f"CACHEING DOLLAR UDF DATAFRAME TO PROCESSED LAYER")\n    usd_price_df.cache()\n    usd_price_df.show(10,truncate=False)\n    logging.info(f"WRITING DOLLAR UDF DATAFRAME TO PROCESSED LAYER")\n    usd_price_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/USD_Price/NFT={nft_name}/\')\n\n    return\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    process_usd_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'+------------------------------------------+-----------------------------------------------------------+
|owner_address                             |Token_Balance                                              |
+------------------------------------------+-----------------------------------------------------------+
|0x052564eb0fd8b340803df55def89c25c432f43f4|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
|0x13c59c501f8557fb44724df06a85ccaeefc90374|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
|0x1d3eb89c3a5c5ec4808ac341732efd45c0f1703d|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 410000000000000000}|
|0x224b3f081075c1bc10e8fce9c03719214f714e23|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
|0x2a584a403ec9ad290a864465654b3a32a4588d37|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
|0x4b4c13434aac5e99645a4d9e59fe497b3318f50f|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
|0x4f3d9f60c500a79beac465c50a60e1088ae75622|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
|0x5b9a65eabc2cbfc5eceec377afa4399f702eb3d4|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
|0x5cb58a3fa9b02ae11f443b3adc231172356eccd7|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
|0x644a79558151a29c3364cb1152dfe2763f963101|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                 |
+------------------------------------------+-----------------------------------------------------------+
only showing top 10 rows

Executing command, time = 1643087417207.
Out[123]: '\'\'\'Second_transformation script\'s purpose is to \n1) Use Etherscan and Cryptocompare reference DF to enrich data\n2) Join NFT DF and Cryptocompare DF to create Final NFT DF\n3) Create Final Ether wallet DF\n\'\'\'\n\'\'\'\nthis version (va1) is executable so can be called by airflow\n\'\'\'\nfrom os import truncate\nimport sys\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport time\nimport requests\nimport logging\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n#API parameters\n#OpenSea API\nopensea_url=\'https://api.opensea.io/api/v1/assets\'\nnft_address={\'Cryptopunks\':\'0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\',\\\n                    \'Bored_apes\':\'0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\',\\\n                    \'Cool_cats\':\'0x1a92f7381b9f03921564a437210bb9396471050c\',\\\n                    \'Meebits\':\'0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7\',\\\n                    \'Doodles\':\'0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e\'}\n\n#Etherscan API\netherscan_url=\'https://api.etherscan.io/api?\'\neth_api_key=\'HIVRQXJ7RICD1E2J3U1IYQ74888AI1FWEV\'\ntoken_api_key=\'817C65474DGUC7QRGK64SR29ZZHUW62GTA\'\n\n#Cryptocompare API\ncryptocompare_url=\'https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\'\ncryptocompare_api_key=\'0322f4e8b3f656c131992c34835efabf293037a7fdabb0e1aa4cf3664a3ffaa8\'\n\n#variable for today\'s date for retriveing and writing file name\ntoday=datetime.date.today().strftime(\'%m-%d-%y\')\n\nnft_name=\'Meebits\'\ndef get_token_balance(eth_address):\n    url=etherscan_url\n    api_key=token_api_key\n    token_addresses={\n    \'Wrapped_eth\':\'0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\',\n    \'Tether\':\'0xdac17f958d2ee523a2206206994597c13d831ec7\',\n    \'Usdc\':\'0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\'}\n    new_dict={}\n    for i in token_addresses.keys():\n        param={\'token_balance\':{\'module\':\'account\',\n                                \'action\':\'tokenbalance\',\\\n                                \'contractaddress\':token_addresses[i],\\\n                                \'address\':eth_address,\\\n                                \'tag\':\'latest\',\'apikey\':api_key}}\n        limit_exceeded=True\n        while limit_exceeded==True:\n            response=requests.get(url,params=param[\'token_balance\'])\n            message=response.json()\n            if message[\'result\']==\'Max rate limit reached\':\n                time.sleep(0.5)\n                continue\n            else:\n                limit_exceeded=False\n                new_dict[i]=message[\'result\']\n        \n    return new_dict\n\n\n\ndef process_token_data():\n    #path to the preprocessed reference data of Etherscan\n    EScan_parquet_path=f\'{preprocessed_data_path}/{today}/EScan/NFT={nft_name}/\'\n\n    logging.info(f"READING TOKEN REFERENCE DATA")\n    EScan_reference_DF=spark.read.parquet(EScan_parquet_path)\n\n    logging.info(f"CALLING TOKEN BALANCE UDF")\n    token_udf=udf(lambda x : get_token_balance(x),MapType(StringType(),StringType()))\n    token_balance_df=EScan_reference_DF.withColumn(\'Token_Balance\',token_udf(EScan_reference_DF[\'owner_address\']))\n    logging.info(f"CACHEING TOKEN UDF DATAFRAME TO PROCESSED LAYER")\n    token_balance_df.cache()\n    token_balance_df.show(10,truncate=False)\n    logging.info(f"WRITING TOKEN UDF DATAFRAME TO PROCESSED LAYER")\n    token_balance_df.write.mode(\'overwrite\').parquet(f\'{processed_data_path}{today}/Token_Balance/NFT={nft_name}/\')\n    \n    return\n\nif __name__=="__main__":\n    process_token_data()\n\n# dag_file_processor_timeout = 50 ->> 120\n'+-------------------+--------+
|txn_date           |USD_Rate|
+-------------------+--------+
|2021-07-09 23:59:30|2145.67 |
|2021-05-13 15:42:34|3718.99 |
|2021-08-04 21:28:42|2725.72 |
|2021-05-04 11:42:32|3241.09 |
|2021-05-04 20:47:35|3241.09 |
|2021-05-04 19:29:46|3241.09 |
|2021-08-30 20:41:08|3228.46 |
|2021-05-09 11:14:03|3927.06 |
|2021-05-08 20:16:18|3916.25 |
|2021-05-09 12:00:20|3927.06 |
+-------------------+--------+
only showing top 10 rows

Executing command, time = 1643087440453.
Out[124]: '\'\'\'Transformation_to_structured script\'s purpose is to \nClean, validate and structure Etherscan and Cryptocompare Enrichment data\n\'\'\'\nimport sys\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport logging\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\n\ndef Structured_transformation_nft():\n    today=datetime.date.today().strftime(\'%m-%d-%y\')\n\n    # reading Opensea NFT files from processed and writing to structured\n    logging.info(f"CREATING NFT DATAFRAME FROM PROCESSED")\n    processed_nft_df= spark.read.parquet(f\'{processed_data_path}{today}/NFT_Collection/\')\n    \n    logging.info(f"CREATING CRYPTOCOMPARE USD DATAFRAME FROM PROCESSED")\n    processed_usd_df=spark.read.parquet(f\'{processed_data_path}{today}/USD_Price/NFT=**/\')\n\n    logging.info(f"JOINING NFT AND USD DATAFRAME")\n    structured_nft_DF=processed_nft_df.join(broadcast(processed_usd_df),processed_nft_df[\'txn_date\']==processed_usd_df[\'txn_date\'],\'left\').drop(processed_usd_df[\'txn_date\'])\n\n    logging.info(f"WRITING NFT DATAFRAME TO STRUCTURED")\n    structured_nft_DF.show(10,truncate=False)\n    structured_nft_DF.write.mode(\'overwrite\').parquet(f\'{structured_data_path}{today}/NFT_Collection/\')\n    \n    return\n\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    Structured_transformation_nft()\n'+-----------------+--------+---------+---------------+------------------------------------------+-------------------+-----------------+------------+--------+
|NFT              |token_id|num_sales|username       |owner_address                             |txn_date           |payment_amt      |payment_type|USD_Rate|
+-----------------+--------+---------+---------------+------------------------------------------+-------------------+-----------------+------------+--------+
|BoredApeYachtClub|2087    |2        |null           |0x066317b90509069eb52474a38c212508f8a1211c|2021-09-30 01:28:47|769.0            |ETH         |3000.83 |
|BoredApeYachtClub|3749    |3        |TheSandboxGame |0x7a9fe22691c811ea339d9b73150e6911a5343dca|2021-09-06 21:02:29|740.0            |ETH         |3928.4  |
|BoredApeYachtClub|8585    |3        |null           |0x86292f24afffe8d4159282980db89e8ef4b92b0a|2021-10-19 23:15:59|696.9689999999999|ETH         |3877.45 |
|BoredApeYachtClub|7090    |2        |j1mmy_vault    |0x8ad272ac86c6c88683d9a60eb8ed57e6c304bb0c|2021-09-02 14:59:41|600.0            |ETH         |3787.7  |
|BoredApeYachtClub|8135    |3        |MetalinkLabs   |0x222a50ddb9126d372eb5811a727581cb6dc31237|2021-09-17 16:43:57|550.0            |WETH        |3398.82 |
|BoredApeYachtClub|9361    |3        |Rewkang_Vault  |0xff3879b8a363aed92a6eaba8f61f1a96a9ec3c1e|2021-08-26 19:00:15|500.0            |ETH         |3093.62 |
|BoredApeYachtClub|3562    |2        |MachiBigBrother|0x020ca66c30bec2c4fe3861a94e4db4a498a35872|2021-12-28 22:17:44|430.0            |ETH         |3793.54 |
|BoredApeYachtClub|5199    |2        |MachiBigBrother|0x020ca66c30bec2c4fe3861a94e4db4a498a35872|2021-10-14 12:57:22|425.0            |ETH         |3791.23 |
|BoredApeYachtClub|8877    |3        |null           |0x066317b90509069eb52474a38c212508f8a1211c|2021-08-30 03:49:45|425.0            |ETH         |3228.46 |
|BoredApeYachtClub|1837    |5        |0xDeepak       |0x69c488bcda156379b6661f08a35db627e5d467dd|2022-01-09 00:31:32|420.69           |ETH         |3150.83 |
+-----------------+--------+---------+---------------+------------------------------------------+-------------------+-----------------+------------+--------+
only showing top 10 rows

+------------------------------------------+---------------------------------------------------------------------+
|owner_address                             |Token_Balance                                                        |
+------------------------------------------+---------------------------------------------------------------------+
|0x005e9eed36bfea0d05c0e8f36f32d4f4e08efacd|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                           |
|0x0845fc89c51b2bcd1c3b0db9dbca497d641ec7d3|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                           |
|0x09d4083ffd20d21acb9118465ad7c52ac8b548f7|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 561932909715553683}          |
|0x1e611bef4bbcb562d2f1e0784084a75a7e7402a8|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                           |
|0x1e898058a3404b9cb4a1ebe0190c45bf84226ce6|{Usdc -> 150321677601, Tether -> 2305175, Wrapped_eth -> 0}          |
|0x362b638b43f767350ac0a01b67baad825c108f3d|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                           |
|0x4c4083b2cc9d433207a9c811865fd93b8902c0f9|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                           |
|0x53ede7cae3eb6a7d11429fe589c0278c9acbe21a|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                           |
|0x56178626332fc530561535eeaa914b863aa455f2|{Usdc -> 100000000, Tether -> 0, Wrapped_eth -> 11600000000000000000}|
|0x63de6063eed48e863ef4b316159630ebaf897c40|{Usdc -> 0, Tether -> 0, Wrapped_eth -> 0}                           |
+------------------------------------------+---------------------------------------------------------------------+
only showing top 10 rows

Executing command, time = 1643087459187.
Out[125]: '\'\'\'Transformation_to_structured script\'s purpose is to \nClean, validate and structure Etherscan and Cryptocompare Enrichment data\n\'\'\'\n\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport logging\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\n\ndef Published_transformation_NFT():\n    today=datetime.date.today().strftime(\'%m-%d-%y\')\n    # reading EtherScan Token and ETH DF from processed and writing to structured\n    logging.info(f"READING NFT DATAFRAME FROM STRUCTURED")\n    \n    struct_NFT_DF=spark.read.parquet(f\'{structured_data_path}{today}/NFT_Collection/\')\n    Final_NFT_DF=struct_NFT_DF.withColumn(\'USD_Value\', (struct_NFT_DF[\'payment_amt\']*struct_NFT_DF[\'USD_Rate\'])).orderBy(col(\'USD_Value\').desc())\n\n    logging.info(f"ADDING USD_TOTAL COLUMN TO NFT DATAFRAME")\n    logging.info(f"WRITING NFT DATAFRAME TO PUBLISHED")\n    Final_NFT_DF.cache()\n    Final_NFT_DF.show(10,truncate=False)\n    Final_NFT_DF.write.mode(\'overwrite\').parquet(f\'{published_data_path}{today}/Final_NFT/\')\n\n\n    return\n\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    Published_transformation_NFT()\n'Executing command, time = 1643087464212.
Out[126]: '\'\'\'Transformation_to_structured script\'s purpose is to \nClean, validate and structure Etherscan and Cryptocompare Enrichment data\n\'\'\'\n\nimport sys\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport logging\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\n\n\ndef Structured_transformation_token():\n    today=datetime.date.today().strftime(\'%m-%d-%y\')\n    # reading EtherScan Token and ETH DF from processed and writing to structured\n    logging.info(f"CREATING ETHERSCAN TOKEN DATAFRAME FROM PROCESSED")\n    \n    EScan_token_DF=spark.read.parquet(f\'{processed_data_path}{today}/Token_Balance/NFT=**/\')\n    structured_token_DF=EScan_token_DF.select(\\\n    EScan_token_DF[\'owner_address\'],\\\n    format_number(EScan_token_DF[\'token_balance\'][\'Wrapped_eth\'].cast(FloatType())/10**18,2).alias(\'WETH\'),\\\n    format_number(EScan_token_DF[\'token_balance\'][\'Usdc\'].cast(FloatType())/10**6,2).alias(\'USDC\'),\\\n    format_number(EScan_token_DF[\'token_balance\'][\'Tether\'].cast(FloatType())/10**6,2).alias(\'Tether\')\n    )\n    logging.info(f"WRITING ETHERSCAN TOKEN DATAFRAME TO STRUCTURED")\n    structured_token_DF.show(10,truncate=False)\n    structured_token_DF.write.mode(\'overwrite\').parquet(f\'{structured_data_path}{today}/Token_Balance/\')\n\n\n    return\n\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    Structured_transformation_token()\n'2022-01-25T05:11:08.790+0000: [GC (Allocation Failure) [PSYoungGen: 1930141K->144375K(1950208K)] 2302109K->527981K(6223872K), 0.0898104 secs] [Times: user=0.18 sys=0.02, real=0.09 secs] 
+-----------+--------+---------+------------------------------------------+------------------------------------------+-------------------+------------------+------------+--------+-------------------+
|NFT        |token_id|num_sales|username                                  |owner_address                             |txn_date           |payment_amt       |payment_type|USD_Rate|USD_Value          |
+-----------+--------+---------+------------------------------------------+------------------------------------------+-------------------+------------------+------------+--------+-------------------+
|CryptoPunks|9998    |4        |0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db|0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db|2021-10-28 23:50:37|124457.06752488602|ETH         |4288.22 |5.336992861015668E8|
|CryptoPunks|4156    |5        |TheReal4156                               |0x4c1194386e121566b79d1f1dac9ef282348f04f3|2021-12-09 20:38:17|2500.0            |ETH         |4111.92 |1.02798E7          |
|CryptoPunks|7804    |2        |null                                      |0xf4b4a58974524e183c275f3c6ea895bc2368e738|2021-03-11 00:48:39|4200.0            |ETH         |1827.06 |7673652.0          |
|CryptoPunks|3100    |2        |null                                      |0x7b8961f67382c51c389726667ef7dd7cf95fefd3|2021-03-11 20:57:01|4200.0            |ETH         |1827.06 |7673652.0          |
|CryptoPunks|8857    |2        |null                                      |0xdf37ac79f8e9b698c4ab57d30a41e7f272331391|2021-09-11 18:41:23|2000.0            |ETH         |3266.43 |6532860.0          |
|CryptoPunks|5217    |2        |----------------------                    |0xe301612b0751f6d862a27be205fb8e3c40c8c6db|2021-07-30 21:24:47|2250.0            |ETH         |2463.61 |5543122.5          |
|CryptoPunks|6275    |2        |null                                      |0xbd4fd6759d77e3a3bcd4d838adbe41fd38829d8a|2021-09-04 21:39:01|1319.0            |ETH         |3887.01 |5126966.19         |
|CryptoPunks|7252    |2        |null                                      |0x0a8f4037729accb854da856431a87b8a264d8c40|2021-08-24 06:34:02|1600.0            |ETH         |3172.57 |5076112.0          |
|CryptoPunks|2338    |4        |null                                      |0x7cd3fc0e4ef95897f9b8db951dfc075cc924ebbe|2021-08-06 18:18:56|1500.0            |ETH         |2892.36 |4338540.0          |
|CryptoPunks|2140    |3        |GaryVee                                   |0xd6a984153acb6c9e2d788f08c2465a1358bb89a7|2021-07-30 18:36:56|1600.0            |ETH         |2463.61 |3941776.0          |
+-----------+--------+---------+------------------------------------------+------------------------------------------+-------------------+------------------+------------+--------+-------------------+
only showing top 10 rows

+------------------------------------------+-----+--------+---------+
|owner_address                             |WETH |USDC    |Tether   |
+------------------------------------------+-----+--------+---------+
|0x0bf6305d4382c37a7c330604048ae9813ddade28|0.00 |2,236.18|5,906.70 |
|0x0c54a765c77a88d9cda0bd7ad9b10422848d92ef|0.00 |0.00    |0.00     |
|0x13812fc2e57d690dea7603c83c555af4be848328|0.00 |0.00    |0.00     |
|0x2d8d75d4ba64efda74eead05ac6127df4e46efa9|1.65 |0.00    |0.00     |
|0x2f5170deea823099d75f200ae0524b30c3701881|13.00|0.00    |47,375.14|
|0x32ae912d4abfde382eb5cd4eadd2a3daab914d67|0.19 |0.00    |0.00     |
|0x34978faf3a9f469da7248d1365ddf69ac099588c|0.00 |863.58  |0.00     |
|0x3adc1e9b6c09c1fbd96de6c6ec5b5fea7036fd06|0.00 |0.00    |0.00     |
|0x3c4882d561cbed5ef467783a0e4091cf069708b7|0.00 |8,233.22|0.00     |
|0x3d280fde2ddb59323c891cf30995e1862510342f|0.00 |0.00    |0.00     |
+------------------------------------------+-----+--------+---------+
only showing top 10 rows

Executing command, time = 1643087482867.
Out[127]: '\'\'\'Transformation_to_structured script\'s purpose is to \nClean, validate and structure Etherscan and Cryptocompare Enrichment data\n\'\'\'\n\nfrom os import truncate\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nimport datetime\nimport logging\n\nbase_path=\'/mnt/capstoneblob/Data\'\nraw_data_path=f\'{base_path}/Raw/\'\nraw_data_file_path=[raw_data_path+\'Cryptopunks\',\n    raw_data_path+\'Bored_apes\',\n    raw_data_path+\'Cool_cats\',\n    raw_data_path+\'Meebits\',\n    raw_data_path+\'Doodles\']\n\npreprocessed_data_path=f\'{base_path}/Preprocessed/\'\nprocessed_data_path=f\'{base_path}/Processed/\'\nstructured_data_path=f\'{base_path}/Structured/\'\npublished_data_path=f\'{base_path}/Published/\'\n\ndef Published_transformation_balance():\n    today=datetime.date.today().strftime(\'%m-%d-%y\')\n    # reading EtherScan Token and ETH DF from processed and writing to structured\n    logging.info(f"READING TOKEN AND ETH DATAFRAME FROM STRUCTURED")\n    \n    struct_token_DF=spark.read.parquet(f\'{structured_data_path}{today}/Token_Balance/\')\n    struct_ETH_DF=spark.read.parquet(f\'{structured_data_path}{today}/ETH_Balance/\')\n\n    logging.info(f"JOINING TOKEN AND ETH DATAFRAME")\n    Final_Balance_DF=struct_ETH_DF.join(struct_token_DF,struct_ETH_DF[\'owner_address\']==struct_token_DF[\'owner_address\'],\'left\').drop(struct_token_DF[\'owner_address\'])\n    Final_Balance_DF.cache()\n    Final_Balance_DF.show(10,truncate=False)\n    Final_Balance_DF.write.mode(\'overwrite\').parquet(f\'{published_data_path}{today}/Final_Balance/\')\n\n\n    return\n\n# https://gist.github.com/mighelone/588cbaa2a4a7fb23cc0fadcfb2886c2e#file-spark_dag-py\n\n\nif __name__=="__main__":\n    Published_transformation_balance()\n'+------------------------------------------+------+------+------+------+
|owner_address                             |ETH   |WETH  |USDC  |Tether|
+------------------------------------------+------+------+------+------+
|0x020ca66c30bec2c4fe3861a94e4db4a498a35872|652.09|0.00  |0.00  |0.00  |
|0x05c250120ce07ba6fe361b39ac344148435c25ca|1.53  |0.00  |0.00  |0.00  |
|0x066317b90509069eb52474a38c212508f8a1211c|830.80|0.00  |0.00  |0.00  |
|0x14ae8100ea85a11bbb36578f83ab1b5c1cfdd61c|5.95  |0.07  |435.38|0.00  |
|0x1622ebc67a1db29e276ad11a020448b5307991dd|6.92  |0.00  |0.00  |0.00  |
|0x19cb41c7f8baefa749adf20bef12c0c77313e88f|0.46  |0.00  |0.00  |0.00  |
|0x1dc9fb024fda92a8f409f21bdf2c7d46d11315be|1.77  |0.00  |0.00  |0.00  |
|0x1e89a91408cb1dfe9fddeee89d888fa91ea0e25d|0.96  |0.00  |0.00  |0.00  |
|0x21faa7406de0e6f99c313375b4e0dcad3ea38e2a|102.79|133.00|0.00  |0.00  |
|0x222a50ddb9126d372eb5811a727581cb6dc31237|2.84  |0.00  |0.00  |0.00  |
+------------------------------------------+------+------+------+------+
only showing top 10 rows

2022-01-25T05:13:25.261+0000: [GC (System.gc()) [PSYoungGen: 1547161K->116288K(1922560K)] 1930767K->499901K(6196224K), 0.0818103 secs] [Times: user=0.18 sys=0.00, real=0.08 secs] 
2022-01-25T05:13:25.342+0000: [Full GC (System.gc()) [PSYoungGen: 116288K->0K(1922560K)] [ParOldGen: 383613K->408165K(4273664K)] 499901K->408165K(6196224K), [Metaspace: 257313K->256177K(1300480K)], 1.0369275 secs] [Times: user=3.06 sys=0.00, real=1.04 secs] 
